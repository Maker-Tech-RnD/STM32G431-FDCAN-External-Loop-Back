
CAN-FD-External-Loop-Back.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002530  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002708  08002708  00012708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002728  08002728  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08002728  08002728  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002728  08002728  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002728  08002728  00012728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800272c  0800272c  0001272c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08002730  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  20000030  08002760  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08002760  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007a58  00000000  00000000  000200a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001637  00000000  00000000  00027afb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000870  00000000  00000000  00029138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000642  00000000  00000000  000299a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001be3e  00000000  00000000  00029fea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008954  00000000  00000000  00045e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b1836  00000000  00000000  0004e77c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002170  00000000  00000000  000fffb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00102124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000030 	.word	0x20000030
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080026f0 	.word	0x080026f0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000034 	.word	0x20000034
 8000214:	080026f0 	.word	0x080026f0

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 fb56 	bl	80008ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f96d 	bl	8000500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000226:	f000 f9fd 	bl	8000624 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800022a:	f000 f9b3 	bl	8000594 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  /*##-1 Configure the FDCAN filters ########################################*/
  /* Configure standard ID reception filter to Rx FIFO 0 */
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800022e:	4ba6      	ldr	r3, [pc, #664]	; (80004c8 <main+0x2b0>)
 8000230:	2200      	movs	r2, #0
 8000232:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIndex = 0;
 8000234:	4ba4      	ldr	r3, [pc, #656]	; (80004c8 <main+0x2b0>)
 8000236:	2200      	movs	r2, #0
 8000238:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_DUAL;
 800023a:	4ba3      	ldr	r3, [pc, #652]	; (80004c8 <main+0x2b0>)
 800023c:	2201      	movs	r2, #1
 800023e:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000240:	4ba1      	ldr	r3, [pc, #644]	; (80004c8 <main+0x2b0>)
 8000242:	2201      	movs	r2, #1
 8000244:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterID1 = 0x444;
 8000246:	4ba0      	ldr	r3, [pc, #640]	; (80004c8 <main+0x2b0>)
 8000248:	f240 4244 	movw	r2, #1092	; 0x444
 800024c:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterID2 = 0x555;
 800024e:	4b9e      	ldr	r3, [pc, #632]	; (80004c8 <main+0x2b0>)
 8000250:	f240 5255 	movw	r2, #1365	; 0x555
 8000254:	615a      	str	r2, [r3, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000256:	499c      	ldr	r1, [pc, #624]	; (80004c8 <main+0x2b0>)
 8000258:	489c      	ldr	r0, [pc, #624]	; (80004cc <main+0x2b4>)
 800025a:	f000 fde7 	bl	8000e2c <HAL_FDCAN_ConfigFilter>
 800025e:	4603      	mov	r3, r0
 8000260:	2b00      	cmp	r3, #0
 8000262:	d001      	beq.n	8000268 <main+0x50>
  {
    Error_Handler();
 8000264:	f000 fa4a 	bl	80006fc <Error_Handler>
  }

  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000268:	4b97      	ldr	r3, [pc, #604]	; (80004c8 <main+0x2b0>)
 800026a:	2200      	movs	r2, #0
 800026c:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIndex = 1;
 800026e:	4b96      	ldr	r3, [pc, #600]	; (80004c8 <main+0x2b0>)
 8000270:	2201      	movs	r2, #1
 8000272:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 8000274:	4b94      	ldr	r3, [pc, #592]	; (80004c8 <main+0x2b0>)
 8000276:	2200      	movs	r2, #0
 8000278:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800027a:	4b93      	ldr	r3, [pc, #588]	; (80004c8 <main+0x2b0>)
 800027c:	2201      	movs	r2, #1
 800027e:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterID1 = 0x000;
 8000280:	4b91      	ldr	r3, [pc, #580]	; (80004c8 <main+0x2b0>)
 8000282:	2200      	movs	r2, #0
 8000284:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterID2 = 0x7F7;
 8000286:	4b90      	ldr	r3, [pc, #576]	; (80004c8 <main+0x2b0>)
 8000288:	f240 72f7 	movw	r2, #2039	; 0x7f7
 800028c:	615a      	str	r2, [r3, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 800028e:	498e      	ldr	r1, [pc, #568]	; (80004c8 <main+0x2b0>)
 8000290:	488e      	ldr	r0, [pc, #568]	; (80004cc <main+0x2b4>)
 8000292:	f000 fdcb 	bl	8000e2c <HAL_FDCAN_ConfigFilter>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <main+0x88>
  {
    Error_Handler();
 800029c:	f000 fa2e 	bl	80006fc <Error_Handler>
//    Error_Handler();
//  }


  /* Configure extended ID reception filter to Rx FIFO 1 */
  sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 80002a0:	4b89      	ldr	r3, [pc, #548]	; (80004c8 <main+0x2b0>)
 80002a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002a6:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIndex = 0;
 80002a8:	4b87      	ldr	r3, [pc, #540]	; (80004c8 <main+0x2b0>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_RANGE_NO_EIDM;
 80002ae:	4b86      	ldr	r3, [pc, #536]	; (80004c8 <main+0x2b0>)
 80002b0:	2203      	movs	r2, #3
 80002b2:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO1;
 80002b4:	4b84      	ldr	r3, [pc, #528]	; (80004c8 <main+0x2b0>)
 80002b6:	2202      	movs	r2, #2
 80002b8:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterID1 = 0x1111111;
 80002ba:	4b83      	ldr	r3, [pc, #524]	; (80004c8 <main+0x2b0>)
 80002bc:	4a84      	ldr	r2, [pc, #528]	; (80004d0 <main+0x2b8>)
 80002be:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterID2 = 0x2222222;
 80002c0:	4b81      	ldr	r3, [pc, #516]	; (80004c8 <main+0x2b0>)
 80002c2:	4a84      	ldr	r2, [pc, #528]	; (80004d4 <main+0x2bc>)
 80002c4:	615a      	str	r2, [r3, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80002c6:	4980      	ldr	r1, [pc, #512]	; (80004c8 <main+0x2b0>)
 80002c8:	4880      	ldr	r0, [pc, #512]	; (80004cc <main+0x2b4>)
 80002ca:	f000 fdaf 	bl	8000e2c <HAL_FDCAN_ConfigFilter>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <main+0xc0>
  {
    Error_Handler();
 80002d4:	f000 fa12 	bl	80006fc <Error_Handler>
  }

  /* Configure global filter:
     Filter all remote frames with STD and EXT ID
     Reject non matching frames with STD ID and EXT ID */
  if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 80002d8:	2300      	movs	r3, #0
 80002da:	9300      	str	r3, [sp, #0]
 80002dc:	2300      	movs	r3, #0
 80002de:	2202      	movs	r2, #2
 80002e0:	2102      	movs	r1, #2
 80002e2:	487a      	ldr	r0, [pc, #488]	; (80004cc <main+0x2b4>)
 80002e4:	f000 fdfc 	bl	8000ee0 <HAL_FDCAN_ConfigGlobalFilter>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <main+0xda>
  {
    Error_Handler();
 80002ee:	f000 fa05 	bl	80006fc <Error_Handler>
  }

  /*##-2 Start FDCAN controller (continuous listening CAN bus) ##############*/
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 80002f2:	4876      	ldr	r0, [pc, #472]	; (80004cc <main+0x2b4>)
 80002f4:	f000 fe25 	bl	8000f42 <HAL_FDCAN_Start>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <main+0xea>
  {
    Error_Handler();
 80002fe:	f000 f9fd 	bl	80006fc <Error_Handler>
  }

  /*##-3 Transmit messages ##################################################*/
  /* Add message to Tx FIFO */
  TxHeader.Identifier = 0x555;
 8000302:	4b75      	ldr	r3, [pc, #468]	; (80004d8 <main+0x2c0>)
 8000304:	f240 5255 	movw	r2, #1365	; 0x555
 8000308:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 800030a:	4b73      	ldr	r3, [pc, #460]	; (80004d8 <main+0x2c0>)
 800030c:	2200      	movs	r2, #0
 800030e:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000310:	4b71      	ldr	r3, [pc, #452]	; (80004d8 <main+0x2c0>)
 8000312:	2200      	movs	r2, #0
 8000314:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_12;
 8000316:	4b70      	ldr	r3, [pc, #448]	; (80004d8 <main+0x2c0>)
 8000318:	2209      	movs	r2, #9
 800031a:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800031c:	4b6e      	ldr	r3, [pc, #440]	; (80004d8 <main+0x2c0>)
 800031e:	2200      	movs	r2, #0
 8000320:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8000322:	4b6d      	ldr	r3, [pc, #436]	; (80004d8 <main+0x2c0>)
 8000324:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000328:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_FD_CAN;
 800032a:	4b6b      	ldr	r3, [pc, #428]	; (80004d8 <main+0x2c0>)
 800032c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000330:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_STORE_TX_EVENTS;
 8000332:	4b69      	ldr	r3, [pc, #420]	; (80004d8 <main+0x2c0>)
 8000334:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000338:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0x52;
 800033a:	4b67      	ldr	r3, [pc, #412]	; (80004d8 <main+0x2c0>)
 800033c:	2252      	movs	r2, #82	; 0x52
 800033e:	621a      	str	r2, [r3, #32]
  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData0) != HAL_OK)
 8000340:	4a66      	ldr	r2, [pc, #408]	; (80004dc <main+0x2c4>)
 8000342:	4965      	ldr	r1, [pc, #404]	; (80004d8 <main+0x2c0>)
 8000344:	4861      	ldr	r0, [pc, #388]	; (80004cc <main+0x2b4>)
 8000346:	f000 fe24 	bl	8000f92 <HAL_FDCAN_AddMessageToTxFifoQ>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <main+0x13c>
  {
    Error_Handler();
 8000350:	f000 f9d4 	bl	80006fc <Error_Handler>
//  {
//    Error_Handler();
//  }

  /* Add second message to Tx FIFO */
  TxHeader.Identifier = 0x1111112;
 8000354:	4b60      	ldr	r3, [pc, #384]	; (80004d8 <main+0x2c0>)
 8000356:	4a62      	ldr	r2, [pc, #392]	; (80004e0 <main+0x2c8>)
 8000358:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_EXTENDED_ID;
 800035a:	4b5f      	ldr	r3, [pc, #380]	; (80004d8 <main+0x2c0>)
 800035c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000360:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000362:	4b5d      	ldr	r3, [pc, #372]	; (80004d8 <main+0x2c0>)
 8000364:	2200      	movs	r2, #0
 8000366:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_12;
 8000368:	4b5b      	ldr	r3, [pc, #364]	; (80004d8 <main+0x2c0>)
 800036a:	2209      	movs	r2, #9
 800036c:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_PASSIVE;
 800036e:	4b5a      	ldr	r3, [pc, #360]	; (80004d8 <main+0x2c0>)
 8000370:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000374:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8000376:	4b58      	ldr	r3, [pc, #352]	; (80004d8 <main+0x2c0>)
 8000378:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800037c:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_FD_CAN;
 800037e:	4b56      	ldr	r3, [pc, #344]	; (80004d8 <main+0x2c0>)
 8000380:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000384:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_STORE_TX_EVENTS;
 8000386:	4b54      	ldr	r3, [pc, #336]	; (80004d8 <main+0x2c0>)
 8000388:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800038c:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0xCC;
 800038e:	4b52      	ldr	r3, [pc, #328]	; (80004d8 <main+0x2c0>)
 8000390:	22cc      	movs	r2, #204	; 0xcc
 8000392:	621a      	str	r2, [r3, #32]
  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData1) != HAL_OK)
 8000394:	4a53      	ldr	r2, [pc, #332]	; (80004e4 <main+0x2cc>)
 8000396:	4950      	ldr	r1, [pc, #320]	; (80004d8 <main+0x2c0>)
 8000398:	484c      	ldr	r0, [pc, #304]	; (80004cc <main+0x2b4>)
 800039a:	f000 fdfa 	bl	8000f92 <HAL_FDCAN_AddMessageToTxFifoQ>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <main+0x190>
  {
    Error_Handler();
 80003a4:	f000 f9aa 	bl	80006fc <Error_Handler>
  }

  /* Add third message to Tx FIFO */
  TxHeader.Identifier = 0x1111113;
 80003a8:	4b4b      	ldr	r3, [pc, #300]	; (80004d8 <main+0x2c0>)
 80003aa:	4a4f      	ldr	r2, [pc, #316]	; (80004e8 <main+0x2d0>)
 80003ac:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_EXTENDED_ID;
 80003ae:	4b4a      	ldr	r3, [pc, #296]	; (80004d8 <main+0x2c0>)
 80003b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003b4:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80003b6:	4b48      	ldr	r3, [pc, #288]	; (80004d8 <main+0x2c0>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_12;
 80003bc:	4b46      	ldr	r3, [pc, #280]	; (80004d8 <main+0x2c0>)
 80003be:	2209      	movs	r2, #9
 80003c0:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_PASSIVE;
 80003c2:	4b45      	ldr	r3, [pc, #276]	; (80004d8 <main+0x2c0>)
 80003c4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80003c8:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80003ca:	4b43      	ldr	r3, [pc, #268]	; (80004d8 <main+0x2c0>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_FD_CAN;
 80003d0:	4b41      	ldr	r3, [pc, #260]	; (80004d8 <main+0x2c0>)
 80003d2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80003d6:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_STORE_TX_EVENTS;
 80003d8:	4b3f      	ldr	r3, [pc, #252]	; (80004d8 <main+0x2c0>)
 80003da:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80003de:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0xDD;
 80003e0:	4b3d      	ldr	r3, [pc, #244]	; (80004d8 <main+0x2c0>)
 80003e2:	22dd      	movs	r2, #221	; 0xdd
 80003e4:	621a      	str	r2, [r3, #32]
  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData2) != HAL_OK)
 80003e6:	4a41      	ldr	r2, [pc, #260]	; (80004ec <main+0x2d4>)
 80003e8:	493b      	ldr	r1, [pc, #236]	; (80004d8 <main+0x2c0>)
 80003ea:	4838      	ldr	r0, [pc, #224]	; (80004cc <main+0x2b4>)
 80003ec:	f000 fdd1 	bl	8000f92 <HAL_FDCAN_AddMessageToTxFifoQ>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <main+0x1e2>
  {
    Error_Handler();
 80003f6:	f000 f981 	bl	80006fc <Error_Handler>

  /* Wait transmissions complete */



  while (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 3) {}
 80003fa:	bf00      	nop
 80003fc:	4833      	ldr	r0, [pc, #204]	; (80004cc <main+0x2b4>)
 80003fe:	f000 ff33 	bl	8001268 <HAL_FDCAN_GetTxFifoFreeLevel>
 8000402:	4603      	mov	r3, r0
 8000404:	2b03      	cmp	r3, #3
 8000406:	d1f9      	bne.n	80003fc <main+0x1e4>

  /*##-4 Receive messages ###################################################*/
  /* Check one message is received in Rx FIFO 0 */


  FIFO0_cntr = HAL_FDCAN_GetRxFifoFillLevel(&hfdcan1, FDCAN_RX_FIFO0);
 8000408:	2140      	movs	r1, #64	; 0x40
 800040a:	4830      	ldr	r0, [pc, #192]	; (80004cc <main+0x2b4>)
 800040c:	f000 ff0e 	bl	800122c <HAL_FDCAN_GetRxFifoFillLevel>
 8000410:	4603      	mov	r3, r0
 8000412:	4a37      	ldr	r2, [pc, #220]	; (80004f0 <main+0x2d8>)
 8000414:	6013      	str	r3, [r2, #0]
  FIFO1_cntr = HAL_FDCAN_GetRxFifoFillLevel(&hfdcan1, FDCAN_RX_FIFO1);
 8000416:	2141      	movs	r1, #65	; 0x41
 8000418:	482c      	ldr	r0, [pc, #176]	; (80004cc <main+0x2b4>)
 800041a:	f000 ff07 	bl	800122c <HAL_FDCAN_GetRxFifoFillLevel>
 800041e:	4603      	mov	r3, r0
 8000420:	4a34      	ldr	r2, [pc, #208]	; (80004f4 <main+0x2dc>)
 8000422:	6013      	str	r3, [r2, #0]


  if(HAL_FDCAN_GetRxFifoFillLevel(&hfdcan1, FDCAN_RX_FIFO0) != 1)
 8000424:	2140      	movs	r1, #64	; 0x40
 8000426:	4829      	ldr	r0, [pc, #164]	; (80004cc <main+0x2b4>)
 8000428:	f000 ff00 	bl	800122c <HAL_FDCAN_GetRxFifoFillLevel>
 800042c:	4603      	mov	r3, r0
 800042e:	2b01      	cmp	r3, #1
 8000430:	d001      	beq.n	8000436 <main+0x21e>
  {
    Error_Handler();
 8000432:	f000 f963 	bl	80006fc <Error_Handler>
  }

  /* Retrieve message from Rx FIFO 0 */
  if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000436:	4b30      	ldr	r3, [pc, #192]	; (80004f8 <main+0x2e0>)
 8000438:	4a30      	ldr	r2, [pc, #192]	; (80004fc <main+0x2e4>)
 800043a:	2140      	movs	r1, #64	; 0x40
 800043c:	4823      	ldr	r0, [pc, #140]	; (80004cc <main+0x2b4>)
 800043e:	f000 fded 	bl	800101c <HAL_FDCAN_GetRxMessage>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <main+0x234>
  {
    Error_Handler();
 8000448:	f000 f958 	bl	80006fc <Error_Handler>
  }

  /* Compare payload to expected data */
  if (BufferCmp8b(TxData0, RxData, 12) != 0)
 800044c:	220c      	movs	r2, #12
 800044e:	492a      	ldr	r1, [pc, #168]	; (80004f8 <main+0x2e0>)
 8000450:	4822      	ldr	r0, [pc, #136]	; (80004dc <main+0x2c4>)
 8000452:	f000 f931 	bl	80006b8 <BufferCmp8b>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <main+0x248>
  {
    Error_Handler();
 800045c:	f000 f94e 	bl	80006fc <Error_Handler>
  }

  /* Check two messages are received in Rx FIFO 1 */
  if(HAL_FDCAN_GetRxFifoFillLevel(&hfdcan1, FDCAN_RX_FIFO1) != 2)
 8000460:	2141      	movs	r1, #65	; 0x41
 8000462:	481a      	ldr	r0, [pc, #104]	; (80004cc <main+0x2b4>)
 8000464:	f000 fee2 	bl	800122c <HAL_FDCAN_GetRxFifoFillLevel>
 8000468:	4603      	mov	r3, r0
 800046a:	2b02      	cmp	r3, #2
 800046c:	d001      	beq.n	8000472 <main+0x25a>
  {
    Error_Handler();
 800046e:	f000 f945 	bl	80006fc <Error_Handler>
  }

  /* Retrieve message from Rx FIFO 1 */
  if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO1, &RxHeader, RxData) != HAL_OK)
 8000472:	4b21      	ldr	r3, [pc, #132]	; (80004f8 <main+0x2e0>)
 8000474:	4a21      	ldr	r2, [pc, #132]	; (80004fc <main+0x2e4>)
 8000476:	2141      	movs	r1, #65	; 0x41
 8000478:	4814      	ldr	r0, [pc, #80]	; (80004cc <main+0x2b4>)
 800047a:	f000 fdcf 	bl	800101c <HAL_FDCAN_GetRxMessage>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <main+0x270>
  {
    Error_Handler();
 8000484:	f000 f93a 	bl	80006fc <Error_Handler>
  }

  /* Compare payload to expected data */
  if (BufferCmp8b(TxData1, RxData, 12) != 0)
 8000488:	220c      	movs	r2, #12
 800048a:	491b      	ldr	r1, [pc, #108]	; (80004f8 <main+0x2e0>)
 800048c:	4815      	ldr	r0, [pc, #84]	; (80004e4 <main+0x2cc>)
 800048e:	f000 f913 	bl	80006b8 <BufferCmp8b>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <main+0x284>
  {
    Error_Handler();
 8000498:	f000 f930 	bl	80006fc <Error_Handler>
  }

  /* Retrieve next message from Rx FIFO 1 */
  if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO1, &RxHeader, RxData) != HAL_OK)
 800049c:	4b16      	ldr	r3, [pc, #88]	; (80004f8 <main+0x2e0>)
 800049e:	4a17      	ldr	r2, [pc, #92]	; (80004fc <main+0x2e4>)
 80004a0:	2141      	movs	r1, #65	; 0x41
 80004a2:	480a      	ldr	r0, [pc, #40]	; (80004cc <main+0x2b4>)
 80004a4:	f000 fdba 	bl	800101c <HAL_FDCAN_GetRxMessage>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <main+0x29a>
  {
    Error_Handler();
 80004ae:	f000 f925 	bl	80006fc <Error_Handler>
  }

  /* Compare payload to expected data */
  if (BufferCmp8b(TxData2, RxData, 12) != 0)
 80004b2:	220c      	movs	r2, #12
 80004b4:	4910      	ldr	r1, [pc, #64]	; (80004f8 <main+0x2e0>)
 80004b6:	480d      	ldr	r0, [pc, #52]	; (80004ec <main+0x2d4>)
 80004b8:	f000 f8fe 	bl	80006b8 <BufferCmp8b>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <main+0x2ae>
  {
    Error_Handler();
 80004c2:	f000 f91b 	bl	80006fc <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004c6:	e7fe      	b.n	80004c6 <main+0x2ae>
 80004c8:	200000b0 	.word	0x200000b0
 80004cc:	2000004c 	.word	0x2000004c
 80004d0:	01111111 	.word	0x01111111
 80004d4:	02222222 	.word	0x02222222
 80004d8:	200000c8 	.word	0x200000c8
 80004dc:	20000000 	.word	0x20000000
 80004e0:	01111112 	.word	0x01111112
 80004e4:	2000000c 	.word	0x2000000c
 80004e8:	01111113 	.word	0x01111113
 80004ec:	20000018 	.word	0x20000018
 80004f0:	20000120 	.word	0x20000120
 80004f4:	20000124 	.word	0x20000124
 80004f8:	20000114 	.word	0x20000114
 80004fc:	200000ec 	.word	0x200000ec

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b094      	sub	sp, #80	; 0x50
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	f107 0318 	add.w	r3, r7, #24
 800050a:	2238      	movs	r2, #56	; 0x38
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f002 f8c2 	bl	8002698 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000514:	1d3b      	adds	r3, r7, #4
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	605a      	str	r2, [r3, #4]
 800051c:	609a      	str	r2, [r3, #8]
 800051e:	60da      	str	r2, [r3, #12]
 8000520:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000522:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000526:	f001 f91d 	bl	8001764 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800052a:	2301      	movs	r3, #1
 800052c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800052e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000532:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000534:	2302      	movs	r3, #2
 8000536:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000538:	2303      	movs	r3, #3
 800053a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800053c:	2301      	movs	r3, #1
 800053e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000540:	2310      	movs	r3, #16
 8000542:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000544:	2302      	movs	r3, #2
 8000546:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000548:	2302      	movs	r3, #2
 800054a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800054c:	2302      	movs	r3, #2
 800054e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000550:	f107 0318 	add.w	r3, r7, #24
 8000554:	4618      	mov	r0, r3
 8000556:	f001 f9b9 	bl	80018cc <HAL_RCC_OscConfig>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000560:	f000 f8cc 	bl	80006fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000564:	230f      	movs	r3, #15
 8000566:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000568:	2303      	movs	r3, #3
 800056a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800056c:	2300      	movs	r3, #0
 800056e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000570:	2300      	movs	r3, #0
 8000572:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000574:	2300      	movs	r3, #0
 8000576:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	2102      	movs	r1, #2
 800057c:	4618      	mov	r0, r3
 800057e:	f001 fcb7 	bl	8001ef0 <HAL_RCC_ClockConfig>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000588:	f000 f8b8 	bl	80006fc <Error_Handler>
  }
}
 800058c:	bf00      	nop
 800058e:	3750      	adds	r7, #80	; 0x50
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000598:	4b20      	ldr	r3, [pc, #128]	; (800061c <MX_FDCAN1_Init+0x88>)
 800059a:	4a21      	ldr	r2, [pc, #132]	; (8000620 <MX_FDCAN1_Init+0x8c>)
 800059c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800059e:	4b1f      	ldr	r3, [pc, #124]	; (800061c <MX_FDCAN1_Init+0x88>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80005a4:	4b1d      	ldr	r3, [pc, #116]	; (800061c <MX_FDCAN1_Init+0x88>)
 80005a6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80005aa:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_EXTERNAL_LOOPBACK;
 80005ac:	4b1b      	ldr	r3, [pc, #108]	; (800061c <MX_FDCAN1_Init+0x88>)
 80005ae:	2204      	movs	r2, #4
 80005b0:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80005b2:	4b1a      	ldr	r3, [pc, #104]	; (800061c <MX_FDCAN1_Init+0x88>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 80005b8:	4b18      	ldr	r3, [pc, #96]	; (800061c <MX_FDCAN1_Init+0x88>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80005be:	4b17      	ldr	r3, [pc, #92]	; (800061c <MX_FDCAN1_Init+0x88>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80005c4:	4b15      	ldr	r3, [pc, #84]	; (800061c <MX_FDCAN1_Init+0x88>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 32;
 80005ca:	4b14      	ldr	r3, [pc, #80]	; (800061c <MX_FDCAN1_Init+0x88>)
 80005cc:	2220      	movs	r2, #32
 80005ce:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 95;
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <MX_FDCAN1_Init+0x88>)
 80005d2:	225f      	movs	r2, #95	; 0x5f
 80005d4:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 32;
 80005d6:	4b11      	ldr	r3, [pc, #68]	; (800061c <MX_FDCAN1_Init+0x88>)
 80005d8:	2220      	movs	r2, #32
 80005da:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 80005dc:	4b0f      	ldr	r3, [pc, #60]	; (800061c <MX_FDCAN1_Init+0x88>)
 80005de:	2202      	movs	r2, #2
 80005e0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 8;
 80005e2:	4b0e      	ldr	r3, [pc, #56]	; (800061c <MX_FDCAN1_Init+0x88>)
 80005e4:	2208      	movs	r2, #8
 80005e6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 23;
 80005e8:	4b0c      	ldr	r3, [pc, #48]	; (800061c <MX_FDCAN1_Init+0x88>)
 80005ea:	2217      	movs	r2, #23
 80005ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 8;
 80005ee:	4b0b      	ldr	r3, [pc, #44]	; (800061c <MX_FDCAN1_Init+0x88>)
 80005f0:	2208      	movs	r2, #8
 80005f2:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 8;
 80005f4:	4b09      	ldr	r3, [pc, #36]	; (800061c <MX_FDCAN1_Init+0x88>)
 80005f6:	2208      	movs	r2, #8
 80005f8:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 8;
 80005fa:	4b08      	ldr	r3, [pc, #32]	; (800061c <MX_FDCAN1_Init+0x88>)
 80005fc:	2208      	movs	r2, #8
 80005fe:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <MX_FDCAN1_Init+0x88>)
 8000602:	2200      	movs	r2, #0
 8000604:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000606:	4805      	ldr	r0, [pc, #20]	; (800061c <MX_FDCAN1_Init+0x88>)
 8000608:	f000 fab6 	bl	8000b78 <HAL_FDCAN_Init>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8000612:	f000 f873 	bl	80006fc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	2000004c 	.word	0x2000004c
 8000620:	40006400 	.word	0x40006400

08000624 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b088      	sub	sp, #32
 8000628:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062a:	f107 030c 	add.w	r3, r7, #12
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800063a:	4b1d      	ldr	r3, [pc, #116]	; (80006b0 <MX_GPIO_Init+0x8c>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063e:	4a1c      	ldr	r2, [pc, #112]	; (80006b0 <MX_GPIO_Init+0x8c>)
 8000640:	f043 0320 	orr.w	r3, r3, #32
 8000644:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000646:	4b1a      	ldr	r3, [pc, #104]	; (80006b0 <MX_GPIO_Init+0x8c>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064a:	f003 0320 	and.w	r3, r3, #32
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000652:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <MX_GPIO_Init+0x8c>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000656:	4a16      	ldr	r2, [pc, #88]	; (80006b0 <MX_GPIO_Init+0x8c>)
 8000658:	f043 0304 	orr.w	r3, r3, #4
 800065c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800065e:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <MX_GPIO_Init+0x8c>)
 8000660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000662:	f003 0304 	and.w	r3, r3, #4
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <MX_GPIO_Init+0x8c>)
 800066c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066e:	4a10      	ldr	r2, [pc, #64]	; (80006b0 <MX_GPIO_Init+0x8c>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <MX_GPIO_Init+0x8c>)
 8000678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	2140      	movs	r1, #64	; 0x40
 8000686:	480b      	ldr	r0, [pc, #44]	; (80006b4 <MX_GPIO_Init+0x90>)
 8000688:	f001 f854 	bl	8001734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800068c:	2340      	movs	r3, #64	; 0x40
 800068e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000690:	2301      	movs	r3, #1
 8000692:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000698:	2300      	movs	r3, #0
 800069a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	4619      	mov	r1, r3
 80006a2:	4804      	ldr	r0, [pc, #16]	; (80006b4 <MX_GPIO_Init+0x90>)
 80006a4:	f000 fec4 	bl	8001430 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006a8:	bf00      	nop
 80006aa:	3720      	adds	r7, #32
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40021000 	.word	0x40021000
 80006b4:	48000800 	.word	0x48000800

080006b8 <BufferCmp8b>:
  * @retval
  *   0: pBuffer1 identical to pBuffer2
  *   1: pBuffer1 differs from pBuffer2
  */
static uint32_t BufferCmp8b(uint8_t* pBuffer1, uint8_t* pBuffer2, uint16_t BufferLength)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	4613      	mov	r3, r2
 80006c4:	80fb      	strh	r3, [r7, #6]
  while(BufferLength--)
 80006c6:	e00d      	b.n	80006e4 <BufferCmp8b+0x2c>
  {
    if(*pBuffer1 != *pBuffer2)
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	781a      	ldrb	r2, [r3, #0]
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	429a      	cmp	r2, r3
 80006d2:	d001      	beq.n	80006d8 <BufferCmp8b+0x20>
    {
      return 1;
 80006d4:	2301      	movs	r3, #1
 80006d6:	e00b      	b.n	80006f0 <BufferCmp8b+0x38>
    }

    pBuffer1++;
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	3301      	adds	r3, #1
 80006dc:	60fb      	str	r3, [r7, #12]
    pBuffer2++;
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	3301      	adds	r3, #1
 80006e2:	60bb      	str	r3, [r7, #8]
  while(BufferLength--)
 80006e4:	88fb      	ldrh	r3, [r7, #6]
 80006e6:	1e5a      	subs	r2, r3, #1
 80006e8:	80fa      	strh	r2, [r7, #6]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d1ec      	bne.n	80006c8 <BufferCmp8b+0x10>
  }
  return 0;
 80006ee:	2300      	movs	r3, #0
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3714      	adds	r7, #20
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr

080006fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000700:	b672      	cpsid	i
}
 8000702:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000704:	e7fe      	b.n	8000704 <Error_Handler+0x8>
	...

08000708 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070e:	4b0f      	ldr	r3, [pc, #60]	; (800074c <HAL_MspInit+0x44>)
 8000710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000712:	4a0e      	ldr	r2, [pc, #56]	; (800074c <HAL_MspInit+0x44>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	6613      	str	r3, [r2, #96]	; 0x60
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <HAL_MspInit+0x44>)
 800071c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <HAL_MspInit+0x44>)
 8000728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800072a:	4a08      	ldr	r2, [pc, #32]	; (800074c <HAL_MspInit+0x44>)
 800072c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000730:	6593      	str	r3, [r2, #88]	; 0x58
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <HAL_MspInit+0x44>)
 8000734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073a:	603b      	str	r3, [r7, #0]
 800073c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800073e:	f001 f8b5 	bl	80018ac <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40021000 	.word	0x40021000

08000750 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b09a      	sub	sp, #104	; 0x68
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000758:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000768:	f107 0310 	add.w	r3, r7, #16
 800076c:	2244      	movs	r2, #68	; 0x44
 800076e:	2100      	movs	r1, #0
 8000770:	4618      	mov	r0, r3
 8000772:	f001 ff91 	bl	8002698 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a20      	ldr	r2, [pc, #128]	; (80007fc <HAL_FDCAN_MspInit+0xac>)
 800077c:	4293      	cmp	r3, r2
 800077e:	d139      	bne.n	80007f4 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000784:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000786:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800078a:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800078c:	f107 0310 	add.w	r3, r7, #16
 8000790:	4618      	mov	r0, r3
 8000792:	f001 fd91 	bl	80022b8 <HAL_RCCEx_PeriphCLKConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800079c:	f7ff ffae 	bl	80006fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80007a0:	4b17      	ldr	r3, [pc, #92]	; (8000800 <HAL_FDCAN_MspInit+0xb0>)
 80007a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007a4:	4a16      	ldr	r2, [pc, #88]	; (8000800 <HAL_FDCAN_MspInit+0xb0>)
 80007a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007aa:	6593      	str	r3, [r2, #88]	; 0x58
 80007ac:	4b14      	ldr	r3, [pc, #80]	; (8000800 <HAL_FDCAN_MspInit+0xb0>)
 80007ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b8:	4b11      	ldr	r3, [pc, #68]	; (8000800 <HAL_FDCAN_MspInit+0xb0>)
 80007ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007bc:	4a10      	ldr	r2, [pc, #64]	; (8000800 <HAL_FDCAN_MspInit+0xb0>)
 80007be:	f043 0301 	orr.w	r3, r3, #1
 80007c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c4:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <HAL_FDCAN_MspInit+0xb0>)
 80007c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c8:	f003 0301 	and.w	r3, r3, #1
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80007d0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80007d4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d6:	2302      	movs	r3, #2
 80007d8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	2300      	movs	r3, #0
 80007e0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80007e2:	2309      	movs	r3, #9
 80007e4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007ea:	4619      	mov	r1, r3
 80007ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f0:	f000 fe1e 	bl	8001430 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80007f4:	bf00      	nop
 80007f6:	3768      	adds	r7, #104	; 0x68
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40006400 	.word	0x40006400
 8000800:	40021000 	.word	0x40021000

08000804 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000808:	e7fe      	b.n	8000808 <NMI_Handler+0x4>

0800080a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800080e:	e7fe      	b.n	800080e <HardFault_Handler+0x4>

08000810 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000814:	e7fe      	b.n	8000814 <MemManage_Handler+0x4>

08000816 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800081a:	e7fe      	b.n	800081a <BusFault_Handler+0x4>

0800081c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000820:	e7fe      	b.n	8000820 <UsageFault_Handler+0x4>

08000822 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000850:	f000 f890 	bl	8000974 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}

08000858 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <SystemInit+0x20>)
 800085e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000862:	4a05      	ldr	r2, [pc, #20]	; (8000878 <SystemInit+0x20>)
 8000864:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000868:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	e000ed00 	.word	0xe000ed00

0800087c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800087c:	480d      	ldr	r0, [pc, #52]	; (80008b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800087e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000880:	f7ff ffea 	bl	8000858 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000884:	480c      	ldr	r0, [pc, #48]	; (80008b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000886:	490d      	ldr	r1, [pc, #52]	; (80008bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000888:	4a0d      	ldr	r2, [pc, #52]	; (80008c0 <LoopForever+0xe>)
  movs r3, #0
 800088a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800088c:	e002      	b.n	8000894 <LoopCopyDataInit>

0800088e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800088e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000892:	3304      	adds	r3, #4

08000894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000898:	d3f9      	bcc.n	800088e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800089a:	4a0a      	ldr	r2, [pc, #40]	; (80008c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800089c:	4c0a      	ldr	r4, [pc, #40]	; (80008c8 <LoopForever+0x16>)
  movs r3, #0
 800089e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a0:	e001      	b.n	80008a6 <LoopFillZerobss>

080008a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a4:	3204      	adds	r2, #4

080008a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a8:	d3fb      	bcc.n	80008a2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80008aa:	f001 fefd 	bl	80026a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008ae:	f7ff fcb3 	bl	8000218 <main>

080008b2 <LoopForever>:

LoopForever:
    b LoopForever
 80008b2:	e7fe      	b.n	80008b2 <LoopForever>
  ldr   r0, =_estack
 80008b4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80008b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008bc:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 80008c0:	08002730 	.word	0x08002730
  ldr r2, =_sbss
 80008c4:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 80008c8:	2000012c 	.word	0x2000012c

080008cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008cc:	e7fe      	b.n	80008cc <ADC1_2_IRQHandler>

080008ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b082      	sub	sp, #8
 80008d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008d4:	2300      	movs	r3, #0
 80008d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008d8:	2003      	movs	r0, #3
 80008da:	f000 f91b 	bl	8000b14 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008de:	200f      	movs	r0, #15
 80008e0:	f000 f80e 	bl	8000900 <HAL_InitTick>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d002      	beq.n	80008f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80008ea:	2301      	movs	r3, #1
 80008ec:	71fb      	strb	r3, [r7, #7]
 80008ee:	e001      	b.n	80008f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008f0:	f7ff ff0a 	bl	8000708 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008f4:	79fb      	ldrb	r3, [r7, #7]

}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000908:	2300      	movs	r3, #0
 800090a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800090c:	4b16      	ldr	r3, [pc, #88]	; (8000968 <HAL_InitTick+0x68>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d022      	beq.n	800095a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000914:	4b15      	ldr	r3, [pc, #84]	; (800096c <HAL_InitTick+0x6c>)
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	4b13      	ldr	r3, [pc, #76]	; (8000968 <HAL_InitTick+0x68>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000920:	fbb1 f3f3 	udiv	r3, r1, r3
 8000924:	fbb2 f3f3 	udiv	r3, r2, r3
 8000928:	4618      	mov	r0, r3
 800092a:	f000 f918 	bl	8000b5e <HAL_SYSTICK_Config>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d10f      	bne.n	8000954 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2b0f      	cmp	r3, #15
 8000938:	d809      	bhi.n	800094e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800093a:	2200      	movs	r2, #0
 800093c:	6879      	ldr	r1, [r7, #4]
 800093e:	f04f 30ff 	mov.w	r0, #4294967295
 8000942:	f000 f8f2 	bl	8000b2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000946:	4a0a      	ldr	r2, [pc, #40]	; (8000970 <HAL_InitTick+0x70>)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	6013      	str	r3, [r2, #0]
 800094c:	e007      	b.n	800095e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800094e:	2301      	movs	r3, #1
 8000950:	73fb      	strb	r3, [r7, #15]
 8000952:	e004      	b.n	800095e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000954:	2301      	movs	r3, #1
 8000956:	73fb      	strb	r3, [r7, #15]
 8000958:	e001      	b.n	800095e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800095a:	2301      	movs	r3, #1
 800095c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800095e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000960:	4618      	mov	r0, r3
 8000962:	3710      	adds	r7, #16
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	2000002c 	.word	0x2000002c
 800096c:	20000024 	.word	0x20000024
 8000970:	20000028 	.word	0x20000028

08000974 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000978:	4b05      	ldr	r3, [pc, #20]	; (8000990 <HAL_IncTick+0x1c>)
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	4b05      	ldr	r3, [pc, #20]	; (8000994 <HAL_IncTick+0x20>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4413      	add	r3, r2
 8000982:	4a03      	ldr	r2, [pc, #12]	; (8000990 <HAL_IncTick+0x1c>)
 8000984:	6013      	str	r3, [r2, #0]
}
 8000986:	bf00      	nop
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr
 8000990:	20000128 	.word	0x20000128
 8000994:	2000002c 	.word	0x2000002c

08000998 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  return uwTick;
 800099c:	4b03      	ldr	r3, [pc, #12]	; (80009ac <HAL_GetTick+0x14>)
 800099e:	681b      	ldr	r3, [r3, #0]
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	20000128 	.word	0x20000128

080009b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f003 0307 	and.w	r3, r3, #7
 80009be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <__NVIC_SetPriorityGrouping+0x44>)
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009c6:	68ba      	ldr	r2, [r7, #8]
 80009c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009cc:	4013      	ands	r3, r2
 80009ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009e2:	4a04      	ldr	r2, [pc, #16]	; (80009f4 <__NVIC_SetPriorityGrouping+0x44>)
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	60d3      	str	r3, [r2, #12]
}
 80009e8:	bf00      	nop
 80009ea:	3714      	adds	r7, #20
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009fc:	4b04      	ldr	r3, [pc, #16]	; (8000a10 <__NVIC_GetPriorityGrouping+0x18>)
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	0a1b      	lsrs	r3, r3, #8
 8000a02:	f003 0307 	and.w	r3, r3, #7
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	6039      	str	r1, [r7, #0]
 8000a1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	db0a      	blt.n	8000a3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	b2da      	uxtb	r2, r3
 8000a2c:	490c      	ldr	r1, [pc, #48]	; (8000a60 <__NVIC_SetPriority+0x4c>)
 8000a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a32:	0112      	lsls	r2, r2, #4
 8000a34:	b2d2      	uxtb	r2, r2
 8000a36:	440b      	add	r3, r1
 8000a38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a3c:	e00a      	b.n	8000a54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	4908      	ldr	r1, [pc, #32]	; (8000a64 <__NVIC_SetPriority+0x50>)
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	f003 030f 	and.w	r3, r3, #15
 8000a4a:	3b04      	subs	r3, #4
 8000a4c:	0112      	lsls	r2, r2, #4
 8000a4e:	b2d2      	uxtb	r2, r2
 8000a50:	440b      	add	r3, r1
 8000a52:	761a      	strb	r2, [r3, #24]
}
 8000a54:	bf00      	nop
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	e000e100 	.word	0xe000e100
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b089      	sub	sp, #36	; 0x24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	f003 0307 	and.w	r3, r3, #7
 8000a7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a7c:	69fb      	ldr	r3, [r7, #28]
 8000a7e:	f1c3 0307 	rsb	r3, r3, #7
 8000a82:	2b04      	cmp	r3, #4
 8000a84:	bf28      	it	cs
 8000a86:	2304      	movcs	r3, #4
 8000a88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	3304      	adds	r3, #4
 8000a8e:	2b06      	cmp	r3, #6
 8000a90:	d902      	bls.n	8000a98 <NVIC_EncodePriority+0x30>
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	3b03      	subs	r3, #3
 8000a96:	e000      	b.n	8000a9a <NVIC_EncodePriority+0x32>
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa0:	69bb      	ldr	r3, [r7, #24]
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	43da      	mvns	r2, r3
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	401a      	ands	r2, r3
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aba:	43d9      	mvns	r1, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac0:	4313      	orrs	r3, r2
         );
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3724      	adds	r7, #36	; 0x24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
	...

08000ad0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ae0:	d301      	bcc.n	8000ae6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e00f      	b.n	8000b06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <SysTick_Config+0x40>)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	3b01      	subs	r3, #1
 8000aec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aee:	210f      	movs	r1, #15
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	f7ff ff8e 	bl	8000a14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af8:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <SysTick_Config+0x40>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000afe:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <SysTick_Config+0x40>)
 8000b00:	2207      	movs	r2, #7
 8000b02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	e000e010 	.word	0xe000e010

08000b14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f7ff ff47 	bl	80009b0 <__NVIC_SetPriorityGrouping>
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b086      	sub	sp, #24
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	4603      	mov	r3, r0
 8000b32:	60b9      	str	r1, [r7, #8]
 8000b34:	607a      	str	r2, [r7, #4]
 8000b36:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b38:	f7ff ff5e 	bl	80009f8 <__NVIC_GetPriorityGrouping>
 8000b3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	68b9      	ldr	r1, [r7, #8]
 8000b42:	6978      	ldr	r0, [r7, #20]
 8000b44:	f7ff ff90 	bl	8000a68 <NVIC_EncodePriority>
 8000b48:	4602      	mov	r2, r0
 8000b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b4e:	4611      	mov	r1, r2
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff ff5f 	bl	8000a14 <__NVIC_SetPriority>
}
 8000b56:	bf00      	nop
 8000b58:	3718      	adds	r7, #24
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b082      	sub	sp, #8
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f7ff ffb2 	bl	8000ad0 <SysTick_Config>
 8000b6c:	4603      	mov	r3, r0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
	...

08000b78 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d101      	bne.n	8000b8a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	e147      	b.n	8000e1a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d106      	bne.n	8000ba4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f7ff fdd6 	bl	8000750 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	699a      	ldr	r2, [r3, #24]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f022 0210 	bic.w	r2, r2, #16
 8000bb2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bb4:	f7ff fef0 	bl	8000998 <HAL_GetTick>
 8000bb8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000bba:	e012      	b.n	8000be2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000bbc:	f7ff feec 	bl	8000998 <HAL_GetTick>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	2b0a      	cmp	r3, #10
 8000bc8:	d90b      	bls.n	8000be2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bce:	f043 0201 	orr.w	r2, r3, #1
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2203      	movs	r2, #3
 8000bda:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	e11b      	b.n	8000e1a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	f003 0308 	and.w	r3, r3, #8
 8000bec:	2b08      	cmp	r3, #8
 8000bee:	d0e5      	beq.n	8000bbc <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	699a      	ldr	r2, [r3, #24]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f042 0201 	orr.w	r2, r2, #1
 8000bfe:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c00:	f7ff feca 	bl	8000998 <HAL_GetTick>
 8000c04:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000c06:	e012      	b.n	8000c2e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000c08:	f7ff fec6 	bl	8000998 <HAL_GetTick>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	2b0a      	cmp	r3, #10
 8000c14:	d90b      	bls.n	8000c2e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c1a:	f043 0201 	orr.w	r2, r3, #1
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2203      	movs	r2, #3
 8000c26:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e0f5      	b.n	8000e1a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	f003 0301 	and.w	r3, r3, #1
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d0e5      	beq.n	8000c08 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	699a      	ldr	r2, [r3, #24]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f042 0202 	orr.w	r2, r2, #2
 8000c4a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a74      	ldr	r2, [pc, #464]	; (8000e24 <HAL_FDCAN_Init+0x2ac>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d103      	bne.n	8000c5e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000c56:	4a74      	ldr	r2, [pc, #464]	; (8000e28 <HAL_FDCAN_Init+0x2b0>)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	7c1b      	ldrb	r3, [r3, #16]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d108      	bne.n	8000c78 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	699a      	ldr	r2, [r3, #24]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000c74:	619a      	str	r2, [r3, #24]
 8000c76:	e007      	b.n	8000c88 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	699a      	ldr	r2, [r3, #24]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c86:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	7c5b      	ldrb	r3, [r3, #17]
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d108      	bne.n	8000ca2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	699a      	ldr	r2, [r3, #24]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000c9e:	619a      	str	r2, [r3, #24]
 8000ca0:	e007      	b.n	8000cb2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	699a      	ldr	r2, [r3, #24]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000cb0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	7c9b      	ldrb	r3, [r3, #18]
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d108      	bne.n	8000ccc <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	699a      	ldr	r2, [r3, #24]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000cc8:	619a      	str	r2, [r3, #24]
 8000cca:	e007      	b.n	8000cdc <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	699a      	ldr	r2, [r3, #24]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000cda:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	699b      	ldr	r3, [r3, #24]
 8000ce2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	689a      	ldr	r2, [r3, #8]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	430a      	orrs	r2, r1
 8000cf0:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	699a      	ldr	r2, [r3, #24]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8000d00:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	691a      	ldr	r2, [r3, #16]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f022 0210 	bic.w	r2, r2, #16
 8000d10:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	68db      	ldr	r3, [r3, #12]
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d108      	bne.n	8000d2c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	699a      	ldr	r2, [r3, #24]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f042 0204 	orr.w	r2, r2, #4
 8000d28:	619a      	str	r2, [r3, #24]
 8000d2a:	e02c      	b.n	8000d86 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d028      	beq.n	8000d86 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	d01c      	beq.n	8000d76 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	699a      	ldr	r2, [r3, #24]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d4a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	691a      	ldr	r2, [r3, #16]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f042 0210 	orr.w	r2, r2, #16
 8000d5a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	2b03      	cmp	r3, #3
 8000d62:	d110      	bne.n	8000d86 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	699a      	ldr	r2, [r3, #24]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f042 0220 	orr.w	r2, r2, #32
 8000d72:	619a      	str	r2, [r3, #24]
 8000d74:	e007      	b.n	8000d86 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	699a      	ldr	r2, [r3, #24]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f042 0220 	orr.w	r2, r2, #32
 8000d84:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	69db      	ldr	r3, [r3, #28]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000d96:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6a1b      	ldr	r3, [r3, #32]
 8000d9c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000d9e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	695b      	ldr	r3, [r3, #20]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000dae:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000db0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000dba:	d115      	bne.n	8000de8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000dca:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd0:	3b01      	subs	r3, #1
 8000dd2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000dd4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ddc:	3b01      	subs	r3, #1
 8000dde:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000de4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000de6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f000 fa44 	bl	800128c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2200      	movs	r2, #0
 8000e08:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2201      	movs	r2, #1
 8000e14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40006400 	.word	0x40006400
 8000e28:	40006500 	.word	0x40006500

08000e2c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b087      	sub	sp, #28
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000e3c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8000e3e:	7dfb      	ldrb	r3, [r7, #23]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d002      	beq.n	8000e4a <HAL_FDCAN_ConfigFilter+0x1e>
 8000e44:	7dfb      	ldrb	r3, [r7, #23]
 8000e46:	2b02      	cmp	r3, #2
 8000e48:	d13d      	bne.n	8000ec6 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d119      	bne.n	8000e86 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000e5e:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	691b      	ldr	r3, [r3, #16]
 8000e64:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8000e66:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	4413      	add	r3, r2
 8000e7c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	e01d      	b.n	8000ec2 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	68db      	ldr	r3, [r3, #12]
 8000e8a:	075a      	lsls	r2, r3, #29
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	691b      	ldr	r3, [r3, #16]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	079a      	lsls	r2, r3, #30
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	00db      	lsls	r3, r3, #3
 8000eac:	4413      	add	r3, r2
 8000eae:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	3304      	adds	r3, #4
 8000eba:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	68fa      	ldr	r2, [r7, #12]
 8000ec0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	e006      	b.n	8000ed4 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eca:	f043 0202 	orr.w	r2, r3, #2
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
  }
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	371c      	adds	r7, #28
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
 8000eec:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d116      	bne.n	8000f28 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f02:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	011a      	lsls	r2, r3, #4
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	431a      	orrs	r2, r3
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	431a      	orrs	r2, r3
 8000f16:	69bb      	ldr	r3, [r7, #24]
 8000f18:	431a      	orrs	r2, r3
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8000f24:	2300      	movs	r3, #0
 8000f26:	e006      	b.n	8000f36 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f2c:	f043 0204 	orr.w	r2, r3, #4
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8000f34:	2301      	movs	r3, #1
  }
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3714      	adds	r7, #20
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8000f42:	b480      	push	{r7}
 8000f44:	b083      	sub	sp, #12
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d110      	bne.n	8000f78 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2202      	movs	r2, #2
 8000f5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	699a      	ldr	r2, [r3, #24]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f022 0201 	bic.w	r2, r2, #1
 8000f6c:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2200      	movs	r2, #0
 8000f72:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	e006      	b.n	8000f86 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f7c:	f043 0204 	orr.w	r2, r3, #4
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
  }
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b086      	sub	sp, #24
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	60f8      	str	r0, [r7, #12]
 8000f9a:	60b9      	str	r1, [r7, #8]
 8000f9c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d12c      	bne.n	8001004 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000fb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d007      	beq.n	8000fca <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fbe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e023      	b.n	8001012 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000fd2:	0c1b      	lsrs	r3, r3, #16
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	68b9      	ldr	r1, [r7, #8]
 8000fe0:	68f8      	ldr	r0, [r7, #12]
 8000fe2:	f000 f9a9 	bl	8001338 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2101      	movs	r1, #1
 8000fec:	697a      	ldr	r2, [r7, #20]
 8000fee:	fa01 f202 	lsl.w	r2, r1, r2
 8000ff2:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	409a      	lsls	r2, r3
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001000:	2300      	movs	r3, #0
 8001002:	e006      	b.n	8001012 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001008:	f043 0208 	orr.w	r2, r3, #8
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001010:	2301      	movs	r3, #1
  }
}
 8001012:	4618      	mov	r0, r3
 8001014:	3718      	adds	r7, #24
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800101c:	b480      	push	{r7}
 800101e:	b08b      	sub	sp, #44	; 0x2c
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
 8001028:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001034:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001036:	7efb      	ldrb	r3, [r7, #27]
 8001038:	2b02      	cmp	r3, #2
 800103a:	f040 80e8 	bne.w	800120e <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	2b40      	cmp	r3, #64	; 0x40
 8001042:	d137      	bne.n	80010b4 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800104c:	f003 030f 	and.w	r3, r3, #15
 8001050:	2b00      	cmp	r3, #0
 8001052:	d107      	bne.n	8001064 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001058:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	e0db      	b.n	800121c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800106c:	0e1b      	lsrs	r3, r3, #24
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	2b01      	cmp	r3, #1
 8001074:	d10a      	bne.n	800108c <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800107e:	0a5b      	lsrs	r3, r3, #9
 8001080:	f003 0301 	and.w	r3, r3, #1
 8001084:	2b01      	cmp	r3, #1
 8001086:	d101      	bne.n	800108c <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001088:	2301      	movs	r3, #1
 800108a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001094:	0a1b      	lsrs	r3, r3, #8
 8001096:	f003 0303 	and.w	r3, r3, #3
 800109a:	69fa      	ldr	r2, [r7, #28]
 800109c:	4413      	add	r3, r2
 800109e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80010a4:	69fa      	ldr	r2, [r7, #28]
 80010a6:	4613      	mov	r3, r2
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	4413      	add	r3, r2
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	440b      	add	r3, r1
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
 80010b2:	e036      	b.n	8001122 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80010bc:	f003 030f 	and.w	r3, r3, #15
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d107      	bne.n	80010d4 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010c8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	e0a3      	b.n	800121c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80010dc:	0e1b      	lsrs	r3, r3, #24
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d10a      	bne.n	80010fc <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010ee:	0a1b      	lsrs	r3, r3, #8
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d101      	bne.n	80010fc <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80010f8:	2301      	movs	r3, #1
 80010fa:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001104:	0a1b      	lsrs	r3, r3, #8
 8001106:	f003 0303 	and.w	r3, r3, #3
 800110a:	69fa      	ldr	r2, [r7, #28]
 800110c:	4413      	add	r3, r2
 800110e:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001114:	69fa      	ldr	r2, [r7, #28]
 8001116:	4613      	mov	r3, r2
 8001118:	00db      	lsls	r3, r3, #3
 800111a:	4413      	add	r3, r2
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	440b      	add	r3, r1
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d107      	bne.n	8001146 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	0c9b      	lsrs	r3, r3, #18
 800113c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	e005      	b.n	8001152 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800115e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800116a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116c:	3304      	adds	r3, #4
 800116e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	b29a      	uxth	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800117a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	0c1b      	lsrs	r3, r3, #16
 8001180:	f003 020f 	and.w	r2, r3, #15
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80011a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	0e1b      	lsrs	r3, r3, #24
 80011a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80011ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	0fda      	lsrs	r2, r3, #31
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80011b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ba:	3304      	adds	r3, #4
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80011be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c0:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80011c2:	2300      	movs	r3, #0
 80011c4:	623b      	str	r3, [r7, #32]
 80011c6:	e00a      	b.n	80011de <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80011c8:	697a      	ldr	r2, [r7, #20]
 80011ca:	6a3b      	ldr	r3, [r7, #32]
 80011cc:	441a      	add	r2, r3
 80011ce:	6839      	ldr	r1, [r7, #0]
 80011d0:	6a3b      	ldr	r3, [r7, #32]
 80011d2:	440b      	add	r3, r1
 80011d4:	7812      	ldrb	r2, [r2, #0]
 80011d6:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80011d8:	6a3b      	ldr	r3, [r7, #32]
 80011da:	3301      	adds	r3, #1
 80011dc:	623b      	str	r3, [r7, #32]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	4a11      	ldr	r2, [pc, #68]	; (8001228 <HAL_FDCAN_GetRxMessage+0x20c>)
 80011e4:	5cd3      	ldrb	r3, [r2, r3]
 80011e6:	461a      	mov	r2, r3
 80011e8:	6a3b      	ldr	r3, [r7, #32]
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d3ec      	bcc.n	80011c8 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	2b40      	cmp	r3, #64	; 0x40
 80011f2:	d105      	bne.n	8001200 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	69fa      	ldr	r2, [r7, #28]
 80011fa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80011fe:	e004      	b.n	800120a <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	69fa      	ldr	r2, [r7, #28]
 8001206:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800120a:	2300      	movs	r3, #0
 800120c:	e006      	b.n	800121c <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001212:	f043 0208 	orr.w	r2, r3, #8
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
  }
}
 800121c:	4618      	mov	r0, r3
 800121e:	372c      	adds	r7, #44	; 0x2c
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	08002718 	.word	0x08002718

0800122c <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(const FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	2b40      	cmp	r3, #64	; 0x40
 800123a:	d107      	bne.n	800124c <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001244:	f003 030f 	and.w	r3, r3, #15
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	e006      	b.n	800125a <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001254:	f003 030f 	and.w	r3, r3, #15
 8001258:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 800125a:	68fb      	ldr	r3, [r7, #12]
}
 800125c:	4618      	mov	r0, r3
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001278:	f003 0307 	and.w	r3, r3, #7
 800127c:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 800127e:	68fb      	ldr	r3, [r7, #12]
}
 8001280:	4618      	mov	r0, r3
 8001282:	3714      	adds	r7, #20
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001294:	4b27      	ldr	r3, [pc, #156]	; (8001334 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8001296:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68ba      	ldr	r2, [r7, #8]
 800129c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012a6:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ae:	041a      	lsls	r2, r3, #16
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	430a      	orrs	r2, r1
 80012b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012cc:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012d4:	061a      	lsls	r2, r3, #24
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	430a      	orrs	r2, r1
 80012dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	e005      	b.n	800131a <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	3304      	adds	r3, #4
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001320:	68fa      	ldr	r2, [r7, #12]
 8001322:	429a      	cmp	r2, r3
 8001324:	d3f3      	bcc.n	800130e <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8001326:	bf00      	nop
 8001328:	bf00      	nop
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	4000a400 	.word	0x4000a400

08001338 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8001338:	b480      	push	{r7}
 800133a:	b089      	sub	sp, #36	; 0x24
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
 8001344:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d10a      	bne.n	8001364 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001356:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800135e:	4313      	orrs	r3, r2
 8001360:	61fb      	str	r3, [r7, #28]
 8001362:	e00a      	b.n	800137a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800136c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001372:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001374:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001378:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	6a1b      	ldr	r3, [r3, #32]
 800137e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001384:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800138a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001390:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001398:	4313      	orrs	r3, r2
 800139a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	4613      	mov	r3, r2
 80013a4:	00db      	lsls	r3, r3, #3
 80013a6:	4413      	add	r3, r2
 80013a8:	00db      	lsls	r3, r3, #3
 80013aa:	440b      	add	r3, r1
 80013ac:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	69fa      	ldr	r2, [r7, #28]
 80013b2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	3304      	adds	r3, #4
 80013b8:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	3304      	adds	r3, #4
 80013c4:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
 80013ca:	e020      	b.n	800140e <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	3303      	adds	r3, #3
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	4413      	add	r3, r2
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	3302      	adds	r3, #2
 80013dc:	6879      	ldr	r1, [r7, #4]
 80013de:	440b      	add	r3, r1
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80013e4:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	3301      	adds	r3, #1
 80013ea:	6879      	ldr	r1, [r7, #4]
 80013ec:	440b      	add	r3, r1
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80013f2:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80013f4:	6879      	ldr	r1, [r7, #4]
 80013f6:	697a      	ldr	r2, [r7, #20]
 80013f8:	440a      	add	r2, r1
 80013fa:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80013fc:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	3304      	adds	r3, #4
 8001406:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	3304      	adds	r3, #4
 800140c:	617b      	str	r3, [r7, #20]
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	4a06      	ldr	r2, [pc, #24]	; (800142c <FDCAN_CopyMessageToRAM+0xf4>)
 8001414:	5cd3      	ldrb	r3, [r2, r3]
 8001416:	461a      	mov	r2, r3
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	4293      	cmp	r3, r2
 800141c:	d3d6      	bcc.n	80013cc <FDCAN_CopyMessageToRAM+0x94>
  }
}
 800141e:	bf00      	nop
 8001420:	bf00      	nop
 8001422:	3724      	adds	r7, #36	; 0x24
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	08002718 	.word	0x08002718

08001430 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001430:	b480      	push	{r7}
 8001432:	b087      	sub	sp, #28
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800143e:	e15a      	b.n	80016f6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	2101      	movs	r1, #1
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	fa01 f303 	lsl.w	r3, r1, r3
 800144c:	4013      	ands	r3, r2
 800144e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2b00      	cmp	r3, #0
 8001454:	f000 814c 	beq.w	80016f0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f003 0303 	and.w	r3, r3, #3
 8001460:	2b01      	cmp	r3, #1
 8001462:	d005      	beq.n	8001470 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800146c:	2b02      	cmp	r3, #2
 800146e:	d130      	bne.n	80014d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	2203      	movs	r2, #3
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	4013      	ands	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	68da      	ldr	r2, [r3, #12]
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	4313      	orrs	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014a6:	2201      	movs	r2, #1
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43db      	mvns	r3, r3
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	4013      	ands	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	091b      	lsrs	r3, r3, #4
 80014bc:	f003 0201 	and.w	r2, r3, #1
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f003 0303 	and.w	r3, r3, #3
 80014da:	2b03      	cmp	r3, #3
 80014dc:	d017      	beq.n	800150e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	2203      	movs	r2, #3
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f003 0303 	and.w	r3, r3, #3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d123      	bne.n	8001562 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	08da      	lsrs	r2, r3, #3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	3208      	adds	r2, #8
 8001522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001526:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	220f      	movs	r2, #15
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43db      	mvns	r3, r3
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	4013      	ands	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	691a      	ldr	r2, [r3, #16]
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	f003 0307 	and.w	r3, r3, #7
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	08da      	lsrs	r2, r3, #3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3208      	adds	r2, #8
 800155c:	6939      	ldr	r1, [r7, #16]
 800155e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	2203      	movs	r2, #3
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43db      	mvns	r3, r3
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	4013      	ands	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f003 0203 	and.w	r2, r3, #3
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	4313      	orrs	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f000 80a6 	beq.w	80016f0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a4:	4b5b      	ldr	r3, [pc, #364]	; (8001714 <HAL_GPIO_Init+0x2e4>)
 80015a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015a8:	4a5a      	ldr	r2, [pc, #360]	; (8001714 <HAL_GPIO_Init+0x2e4>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	6613      	str	r3, [r2, #96]	; 0x60
 80015b0:	4b58      	ldr	r3, [pc, #352]	; (8001714 <HAL_GPIO_Init+0x2e4>)
 80015b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015bc:	4a56      	ldr	r2, [pc, #344]	; (8001718 <HAL_GPIO_Init+0x2e8>)
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	089b      	lsrs	r3, r3, #2
 80015c2:	3302      	adds	r3, #2
 80015c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	f003 0303 	and.w	r3, r3, #3
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	220f      	movs	r2, #15
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	43db      	mvns	r3, r3
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	4013      	ands	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015e6:	d01f      	beq.n	8001628 <HAL_GPIO_Init+0x1f8>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4a4c      	ldr	r2, [pc, #304]	; (800171c <HAL_GPIO_Init+0x2ec>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d019      	beq.n	8001624 <HAL_GPIO_Init+0x1f4>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a4b      	ldr	r2, [pc, #300]	; (8001720 <HAL_GPIO_Init+0x2f0>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d013      	beq.n	8001620 <HAL_GPIO_Init+0x1f0>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a4a      	ldr	r2, [pc, #296]	; (8001724 <HAL_GPIO_Init+0x2f4>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d00d      	beq.n	800161c <HAL_GPIO_Init+0x1ec>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a49      	ldr	r2, [pc, #292]	; (8001728 <HAL_GPIO_Init+0x2f8>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d007      	beq.n	8001618 <HAL_GPIO_Init+0x1e8>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a48      	ldr	r2, [pc, #288]	; (800172c <HAL_GPIO_Init+0x2fc>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d101      	bne.n	8001614 <HAL_GPIO_Init+0x1e4>
 8001610:	2305      	movs	r3, #5
 8001612:	e00a      	b.n	800162a <HAL_GPIO_Init+0x1fa>
 8001614:	2306      	movs	r3, #6
 8001616:	e008      	b.n	800162a <HAL_GPIO_Init+0x1fa>
 8001618:	2304      	movs	r3, #4
 800161a:	e006      	b.n	800162a <HAL_GPIO_Init+0x1fa>
 800161c:	2303      	movs	r3, #3
 800161e:	e004      	b.n	800162a <HAL_GPIO_Init+0x1fa>
 8001620:	2302      	movs	r3, #2
 8001622:	e002      	b.n	800162a <HAL_GPIO_Init+0x1fa>
 8001624:	2301      	movs	r3, #1
 8001626:	e000      	b.n	800162a <HAL_GPIO_Init+0x1fa>
 8001628:	2300      	movs	r3, #0
 800162a:	697a      	ldr	r2, [r7, #20]
 800162c:	f002 0203 	and.w	r2, r2, #3
 8001630:	0092      	lsls	r2, r2, #2
 8001632:	4093      	lsls	r3, r2
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	4313      	orrs	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800163a:	4937      	ldr	r1, [pc, #220]	; (8001718 <HAL_GPIO_Init+0x2e8>)
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	089b      	lsrs	r3, r3, #2
 8001640:	3302      	adds	r3, #2
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001648:	4b39      	ldr	r3, [pc, #228]	; (8001730 <HAL_GPIO_Init+0x300>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	43db      	mvns	r3, r3
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	4013      	ands	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d003      	beq.n	800166c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	4313      	orrs	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800166c:	4a30      	ldr	r2, [pc, #192]	; (8001730 <HAL_GPIO_Init+0x300>)
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001672:	4b2f      	ldr	r3, [pc, #188]	; (8001730 <HAL_GPIO_Init+0x300>)
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	43db      	mvns	r3, r3
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	4013      	ands	r3, r2
 8001680:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d003      	beq.n	8001696 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	4313      	orrs	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001696:	4a26      	ldr	r2, [pc, #152]	; (8001730 <HAL_GPIO_Init+0x300>)
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800169c:	4b24      	ldr	r3, [pc, #144]	; (8001730 <HAL_GPIO_Init+0x300>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	43db      	mvns	r3, r3
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	4013      	ands	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d003      	beq.n	80016c0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	4313      	orrs	r3, r2
 80016be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016c0:	4a1b      	ldr	r2, [pc, #108]	; (8001730 <HAL_GPIO_Init+0x300>)
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80016c6:	4b1a      	ldr	r3, [pc, #104]	; (8001730 <HAL_GPIO_Init+0x300>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	43db      	mvns	r3, r3
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	4013      	ands	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016ea:	4a11      	ldr	r2, [pc, #68]	; (8001730 <HAL_GPIO_Init+0x300>)
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	3301      	adds	r3, #1
 80016f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001700:	2b00      	cmp	r3, #0
 8001702:	f47f ae9d 	bne.w	8001440 <HAL_GPIO_Init+0x10>
  }
}
 8001706:	bf00      	nop
 8001708:	bf00      	nop
 800170a:	371c      	adds	r7, #28
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	40021000 	.word	0x40021000
 8001718:	40010000 	.word	0x40010000
 800171c:	48000400 	.word	0x48000400
 8001720:	48000800 	.word	0x48000800
 8001724:	48000c00 	.word	0x48000c00
 8001728:	48001000 	.word	0x48001000
 800172c:	48001400 	.word	0x48001400
 8001730:	40010400 	.word	0x40010400

08001734 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	807b      	strh	r3, [r7, #2]
 8001740:	4613      	mov	r3, r2
 8001742:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001744:	787b      	ldrb	r3, [r7, #1]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800174a:	887a      	ldrh	r2, [r7, #2]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001750:	e002      	b.n	8001758 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001752:	887a      	ldrh	r2, [r7, #2]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d141      	bne.n	80017f6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001772:	4b4b      	ldr	r3, [pc, #300]	; (80018a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800177a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800177e:	d131      	bne.n	80017e4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001780:	4b47      	ldr	r3, [pc, #284]	; (80018a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001782:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001786:	4a46      	ldr	r2, [pc, #280]	; (80018a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001788:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800178c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001790:	4b43      	ldr	r3, [pc, #268]	; (80018a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001798:	4a41      	ldr	r2, [pc, #260]	; (80018a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800179a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800179e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017a0:	4b40      	ldr	r3, [pc, #256]	; (80018a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2232      	movs	r2, #50	; 0x32
 80017a6:	fb02 f303 	mul.w	r3, r2, r3
 80017aa:	4a3f      	ldr	r2, [pc, #252]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80017ac:	fba2 2303 	umull	r2, r3, r2, r3
 80017b0:	0c9b      	lsrs	r3, r3, #18
 80017b2:	3301      	adds	r3, #1
 80017b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017b6:	e002      	b.n	80017be <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	3b01      	subs	r3, #1
 80017bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017be:	4b38      	ldr	r3, [pc, #224]	; (80018a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017ca:	d102      	bne.n	80017d2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1f2      	bne.n	80017b8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017d2:	4b33      	ldr	r3, [pc, #204]	; (80018a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017d4:	695b      	ldr	r3, [r3, #20]
 80017d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017de:	d158      	bne.n	8001892 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e057      	b.n	8001894 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017e4:	4b2e      	ldr	r3, [pc, #184]	; (80018a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017ea:	4a2d      	ldr	r2, [pc, #180]	; (80018a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80017f4:	e04d      	b.n	8001892 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017fc:	d141      	bne.n	8001882 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017fe:	4b28      	ldr	r3, [pc, #160]	; (80018a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800180a:	d131      	bne.n	8001870 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800180c:	4b24      	ldr	r3, [pc, #144]	; (80018a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800180e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001812:	4a23      	ldr	r2, [pc, #140]	; (80018a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001818:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800181c:	4b20      	ldr	r3, [pc, #128]	; (80018a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001824:	4a1e      	ldr	r2, [pc, #120]	; (80018a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001826:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800182a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800182c:	4b1d      	ldr	r3, [pc, #116]	; (80018a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2232      	movs	r2, #50	; 0x32
 8001832:	fb02 f303 	mul.w	r3, r2, r3
 8001836:	4a1c      	ldr	r2, [pc, #112]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001838:	fba2 2303 	umull	r2, r3, r2, r3
 800183c:	0c9b      	lsrs	r3, r3, #18
 800183e:	3301      	adds	r3, #1
 8001840:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001842:	e002      	b.n	800184a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	3b01      	subs	r3, #1
 8001848:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800184a:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001852:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001856:	d102      	bne.n	800185e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1f2      	bne.n	8001844 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800185e:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800186a:	d112      	bne.n	8001892 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e011      	b.n	8001894 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001870:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001872:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001876:	4a0a      	ldr	r2, [pc, #40]	; (80018a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800187c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001880:	e007      	b.n	8001892 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001882:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800188a:	4a05      	ldr	r2, [pc, #20]	; (80018a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800188c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001890:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	40007000 	.word	0x40007000
 80018a4:	20000024 	.word	0x20000024
 80018a8:	431bde83 	.word	0x431bde83

080018ac <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80018b0:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	4a04      	ldr	r2, [pc, #16]	; (80018c8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80018b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018ba:	6093      	str	r3, [r2, #8]
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	40007000 	.word	0x40007000

080018cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b088      	sub	sp, #32
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e2fe      	b.n	8001edc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d075      	beq.n	80019d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ea:	4b97      	ldr	r3, [pc, #604]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 030c 	and.w	r3, r3, #12
 80018f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018f4:	4b94      	ldr	r3, [pc, #592]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	f003 0303 	and.w	r3, r3, #3
 80018fc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	2b0c      	cmp	r3, #12
 8001902:	d102      	bne.n	800190a <HAL_RCC_OscConfig+0x3e>
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	2b03      	cmp	r3, #3
 8001908:	d002      	beq.n	8001910 <HAL_RCC_OscConfig+0x44>
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	2b08      	cmp	r3, #8
 800190e:	d10b      	bne.n	8001928 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001910:	4b8d      	ldr	r3, [pc, #564]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d05b      	beq.n	80019d4 <HAL_RCC_OscConfig+0x108>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d157      	bne.n	80019d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e2d9      	b.n	8001edc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001930:	d106      	bne.n	8001940 <HAL_RCC_OscConfig+0x74>
 8001932:	4b85      	ldr	r3, [pc, #532]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a84      	ldr	r2, [pc, #528]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 8001938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800193c:	6013      	str	r3, [r2, #0]
 800193e:	e01d      	b.n	800197c <HAL_RCC_OscConfig+0xb0>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001948:	d10c      	bne.n	8001964 <HAL_RCC_OscConfig+0x98>
 800194a:	4b7f      	ldr	r3, [pc, #508]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a7e      	ldr	r2, [pc, #504]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 8001950:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	4b7c      	ldr	r3, [pc, #496]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a7b      	ldr	r2, [pc, #492]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 800195c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	e00b      	b.n	800197c <HAL_RCC_OscConfig+0xb0>
 8001964:	4b78      	ldr	r3, [pc, #480]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a77      	ldr	r2, [pc, #476]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 800196a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800196e:	6013      	str	r3, [r2, #0]
 8001970:	4b75      	ldr	r3, [pc, #468]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a74      	ldr	r2, [pc, #464]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 8001976:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800197a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d013      	beq.n	80019ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001984:	f7ff f808 	bl	8000998 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800198c:	f7ff f804 	bl	8000998 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b64      	cmp	r3, #100	; 0x64
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e29e      	b.n	8001edc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800199e:	4b6a      	ldr	r3, [pc, #424]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0f0      	beq.n	800198c <HAL_RCC_OscConfig+0xc0>
 80019aa:	e014      	b.n	80019d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ac:	f7fe fff4 	bl	8000998 <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019b4:	f7fe fff0 	bl	8000998 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b64      	cmp	r3, #100	; 0x64
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e28a      	b.n	8001edc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019c6:	4b60      	ldr	r3, [pc, #384]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1f0      	bne.n	80019b4 <HAL_RCC_OscConfig+0xe8>
 80019d2:	e000      	b.n	80019d6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d075      	beq.n	8001ace <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019e2:	4b59      	ldr	r3, [pc, #356]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f003 030c 	and.w	r3, r3, #12
 80019ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019ec:	4b56      	ldr	r3, [pc, #344]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	f003 0303 	and.w	r3, r3, #3
 80019f4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	2b0c      	cmp	r3, #12
 80019fa:	d102      	bne.n	8001a02 <HAL_RCC_OscConfig+0x136>
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d002      	beq.n	8001a08 <HAL_RCC_OscConfig+0x13c>
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	2b04      	cmp	r3, #4
 8001a06:	d11f      	bne.n	8001a48 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a08:	4b4f      	ldr	r3, [pc, #316]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d005      	beq.n	8001a20 <HAL_RCC_OscConfig+0x154>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d101      	bne.n	8001a20 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e25d      	b.n	8001edc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a20:	4b49      	ldr	r3, [pc, #292]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	691b      	ldr	r3, [r3, #16]
 8001a2c:	061b      	lsls	r3, r3, #24
 8001a2e:	4946      	ldr	r1, [pc, #280]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a34:	4b45      	ldr	r3, [pc, #276]	; (8001b4c <HAL_RCC_OscConfig+0x280>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7fe ff61 	bl	8000900 <HAL_InitTick>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d043      	beq.n	8001acc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e249      	b.n	8001edc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d023      	beq.n	8001a98 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a50:	4b3d      	ldr	r3, [pc, #244]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a3c      	ldr	r2, [pc, #240]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 8001a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5c:	f7fe ff9c 	bl	8000998 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a64:	f7fe ff98 	bl	8000998 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e232      	b.n	8001edc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a76:	4b34      	ldr	r3, [pc, #208]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0f0      	beq.n	8001a64 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a82:	4b31      	ldr	r3, [pc, #196]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	061b      	lsls	r3, r3, #24
 8001a90:	492d      	ldr	r1, [pc, #180]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	604b      	str	r3, [r1, #4]
 8001a96:	e01a      	b.n	8001ace <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a98:	4b2b      	ldr	r3, [pc, #172]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a2a      	ldr	r2, [pc, #168]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 8001a9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001aa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa4:	f7fe ff78 	bl	8000998 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aac:	f7fe ff74 	bl	8000998 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e20e      	b.n	8001edc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001abe:	4b22      	ldr	r3, [pc, #136]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1f0      	bne.n	8001aac <HAL_RCC_OscConfig+0x1e0>
 8001aca:	e000      	b.n	8001ace <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001acc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0308 	and.w	r3, r3, #8
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d041      	beq.n	8001b5e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d01c      	beq.n	8001b1c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ae2:	4b19      	ldr	r3, [pc, #100]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 8001ae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ae8:	4a17      	ldr	r2, [pc, #92]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 8001aea:	f043 0301 	orr.w	r3, r3, #1
 8001aee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af2:	f7fe ff51 	bl	8000998 <HAL_GetTick>
 8001af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001af8:	e008      	b.n	8001b0c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001afa:	f7fe ff4d 	bl	8000998 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e1e7      	b.n	8001edc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b0c:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 8001b0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0ef      	beq.n	8001afa <HAL_RCC_OscConfig+0x22e>
 8001b1a:	e020      	b.n	8001b5e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b1c:	4b0a      	ldr	r3, [pc, #40]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 8001b1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b22:	4a09      	ldr	r2, [pc, #36]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 8001b24:	f023 0301 	bic.w	r3, r3, #1
 8001b28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b2c:	f7fe ff34 	bl	8000998 <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b32:	e00d      	b.n	8001b50 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b34:	f7fe ff30 	bl	8000998 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d906      	bls.n	8001b50 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e1ca      	b.n	8001edc <HAL_RCC_OscConfig+0x610>
 8001b46:	bf00      	nop
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	20000028 	.word	0x20000028
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b50:	4b8c      	ldr	r3, [pc, #560]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1ea      	bne.n	8001b34 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0304 	and.w	r3, r3, #4
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f000 80a6 	beq.w	8001cb8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b70:	4b84      	ldr	r3, [pc, #528]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <HAL_RCC_OscConfig+0x2b4>
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e000      	b.n	8001b82 <HAL_RCC_OscConfig+0x2b6>
 8001b80:	2300      	movs	r3, #0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d00d      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b86:	4b7f      	ldr	r3, [pc, #508]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8a:	4a7e      	ldr	r2, [pc, #504]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b90:	6593      	str	r3, [r2, #88]	; 0x58
 8001b92:	4b7c      	ldr	r3, [pc, #496]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ba2:	4b79      	ldr	r3, [pc, #484]	; (8001d88 <HAL_RCC_OscConfig+0x4bc>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d118      	bne.n	8001be0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bae:	4b76      	ldr	r3, [pc, #472]	; (8001d88 <HAL_RCC_OscConfig+0x4bc>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a75      	ldr	r2, [pc, #468]	; (8001d88 <HAL_RCC_OscConfig+0x4bc>)
 8001bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bba:	f7fe feed 	bl	8000998 <HAL_GetTick>
 8001bbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bc0:	e008      	b.n	8001bd4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bc2:	f7fe fee9 	bl	8000998 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e183      	b.n	8001edc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bd4:	4b6c      	ldr	r3, [pc, #432]	; (8001d88 <HAL_RCC_OscConfig+0x4bc>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d0f0      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d108      	bne.n	8001bfa <HAL_RCC_OscConfig+0x32e>
 8001be8:	4b66      	ldr	r3, [pc, #408]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bee:	4a65      	ldr	r2, [pc, #404]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bf8:	e024      	b.n	8001c44 <HAL_RCC_OscConfig+0x378>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	2b05      	cmp	r3, #5
 8001c00:	d110      	bne.n	8001c24 <HAL_RCC_OscConfig+0x358>
 8001c02:	4b60      	ldr	r3, [pc, #384]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c08:	4a5e      	ldr	r2, [pc, #376]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001c0a:	f043 0304 	orr.w	r3, r3, #4
 8001c0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c12:	4b5c      	ldr	r3, [pc, #368]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c18:	4a5a      	ldr	r2, [pc, #360]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001c1a:	f043 0301 	orr.w	r3, r3, #1
 8001c1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c22:	e00f      	b.n	8001c44 <HAL_RCC_OscConfig+0x378>
 8001c24:	4b57      	ldr	r3, [pc, #348]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c2a:	4a56      	ldr	r2, [pc, #344]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001c2c:	f023 0301 	bic.w	r3, r3, #1
 8001c30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c34:	4b53      	ldr	r3, [pc, #332]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c3a:	4a52      	ldr	r2, [pc, #328]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001c3c:	f023 0304 	bic.w	r3, r3, #4
 8001c40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d016      	beq.n	8001c7a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c4c:	f7fe fea4 	bl	8000998 <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c52:	e00a      	b.n	8001c6a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c54:	f7fe fea0 	bl	8000998 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e138      	b.n	8001edc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c6a:	4b46      	ldr	r3, [pc, #280]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0ed      	beq.n	8001c54 <HAL_RCC_OscConfig+0x388>
 8001c78:	e015      	b.n	8001ca6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c7a:	f7fe fe8d 	bl	8000998 <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c80:	e00a      	b.n	8001c98 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c82:	f7fe fe89 	bl	8000998 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e121      	b.n	8001edc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c98:	4b3a      	ldr	r3, [pc, #232]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1ed      	bne.n	8001c82 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ca6:	7ffb      	ldrb	r3, [r7, #31]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d105      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cac:	4b35      	ldr	r3, [pc, #212]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb0:	4a34      	ldr	r2, [pc, #208]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001cb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cb6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0320 	and.w	r3, r3, #32
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d03c      	beq.n	8001d3e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d01c      	beq.n	8001d06 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ccc:	4b2d      	ldr	r3, [pc, #180]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001cce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cd2:	4a2c      	ldr	r2, [pc, #176]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cdc:	f7fe fe5c 	bl	8000998 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ce4:	f7fe fe58 	bl	8000998 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e0f2      	b.n	8001edc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cf6:	4b23      	ldr	r3, [pc, #140]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001cf8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d0ef      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x418>
 8001d04:	e01b      	b.n	8001d3e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d06:	4b1f      	ldr	r3, [pc, #124]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001d08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d0c:	4a1d      	ldr	r2, [pc, #116]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001d0e:	f023 0301 	bic.w	r3, r3, #1
 8001d12:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d16:	f7fe fe3f 	bl	8000998 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d1e:	f7fe fe3b 	bl	8000998 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e0d5      	b.n	8001edc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d30:	4b14      	ldr	r3, [pc, #80]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001d32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1ef      	bne.n	8001d1e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f000 80c9 	beq.w	8001eda <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d48:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 030c 	and.w	r3, r3, #12
 8001d50:	2b0c      	cmp	r3, #12
 8001d52:	f000 8083 	beq.w	8001e5c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d15e      	bne.n	8001e1c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d5e:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a08      	ldr	r2, [pc, #32]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001d64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6a:	f7fe fe15 	bl	8000998 <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d70:	e00c      	b.n	8001d8c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d72:	f7fe fe11 	bl	8000998 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d905      	bls.n	8001d8c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e0ab      	b.n	8001edc <HAL_RCC_OscConfig+0x610>
 8001d84:	40021000 	.word	0x40021000
 8001d88:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d8c:	4b55      	ldr	r3, [pc, #340]	; (8001ee4 <HAL_RCC_OscConfig+0x618>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1ec      	bne.n	8001d72 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d98:	4b52      	ldr	r3, [pc, #328]	; (8001ee4 <HAL_RCC_OscConfig+0x618>)
 8001d9a:	68da      	ldr	r2, [r3, #12]
 8001d9c:	4b52      	ldr	r3, [pc, #328]	; (8001ee8 <HAL_RCC_OscConfig+0x61c>)
 8001d9e:	4013      	ands	r3, r2
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	6a11      	ldr	r1, [r2, #32]
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001da8:	3a01      	subs	r2, #1
 8001daa:	0112      	lsls	r2, r2, #4
 8001dac:	4311      	orrs	r1, r2
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001db2:	0212      	lsls	r2, r2, #8
 8001db4:	4311      	orrs	r1, r2
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001dba:	0852      	lsrs	r2, r2, #1
 8001dbc:	3a01      	subs	r2, #1
 8001dbe:	0552      	lsls	r2, r2, #21
 8001dc0:	4311      	orrs	r1, r2
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001dc6:	0852      	lsrs	r2, r2, #1
 8001dc8:	3a01      	subs	r2, #1
 8001dca:	0652      	lsls	r2, r2, #25
 8001dcc:	4311      	orrs	r1, r2
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001dd2:	06d2      	lsls	r2, r2, #27
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	4943      	ldr	r1, [pc, #268]	; (8001ee4 <HAL_RCC_OscConfig+0x618>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ddc:	4b41      	ldr	r3, [pc, #260]	; (8001ee4 <HAL_RCC_OscConfig+0x618>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a40      	ldr	r2, [pc, #256]	; (8001ee4 <HAL_RCC_OscConfig+0x618>)
 8001de2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001de6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001de8:	4b3e      	ldr	r3, [pc, #248]	; (8001ee4 <HAL_RCC_OscConfig+0x618>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	4a3d      	ldr	r2, [pc, #244]	; (8001ee4 <HAL_RCC_OscConfig+0x618>)
 8001dee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001df2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df4:	f7fe fdd0 	bl	8000998 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dfc:	f7fe fdcc 	bl	8000998 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e066      	b.n	8001edc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e0e:	4b35      	ldr	r3, [pc, #212]	; (8001ee4 <HAL_RCC_OscConfig+0x618>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d0f0      	beq.n	8001dfc <HAL_RCC_OscConfig+0x530>
 8001e1a:	e05e      	b.n	8001eda <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e1c:	4b31      	ldr	r3, [pc, #196]	; (8001ee4 <HAL_RCC_OscConfig+0x618>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a30      	ldr	r2, [pc, #192]	; (8001ee4 <HAL_RCC_OscConfig+0x618>)
 8001e22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e28:	f7fe fdb6 	bl	8000998 <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e30:	f7fe fdb2 	bl	8000998 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e04c      	b.n	8001edc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e42:	4b28      	ldr	r3, [pc, #160]	; (8001ee4 <HAL_RCC_OscConfig+0x618>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1f0      	bne.n	8001e30 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001e4e:	4b25      	ldr	r3, [pc, #148]	; (8001ee4 <HAL_RCC_OscConfig+0x618>)
 8001e50:	68da      	ldr	r2, [r3, #12]
 8001e52:	4924      	ldr	r1, [pc, #144]	; (8001ee4 <HAL_RCC_OscConfig+0x618>)
 8001e54:	4b25      	ldr	r3, [pc, #148]	; (8001eec <HAL_RCC_OscConfig+0x620>)
 8001e56:	4013      	ands	r3, r2
 8001e58:	60cb      	str	r3, [r1, #12]
 8001e5a:	e03e      	b.n	8001eda <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69db      	ldr	r3, [r3, #28]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d101      	bne.n	8001e68 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e039      	b.n	8001edc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001e68:	4b1e      	ldr	r3, [pc, #120]	; (8001ee4 <HAL_RCC_OscConfig+0x618>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	f003 0203 	and.w	r2, r3, #3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d12c      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e86:	3b01      	subs	r3, #1
 8001e88:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d123      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e98:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d11b      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d113      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb8:	085b      	lsrs	r3, r3, #1
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d109      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ecc:	085b      	lsrs	r3, r3, #1
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d001      	beq.n	8001eda <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e000      	b.n	8001edc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3720      	adds	r7, #32
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	019f800c 	.word	0x019f800c
 8001eec:	feeefffc 	.word	0xfeeefffc

08001ef0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001efa:	2300      	movs	r3, #0
 8001efc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d101      	bne.n	8001f08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e11e      	b.n	8002146 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f08:	4b91      	ldr	r3, [pc, #580]	; (8002150 <HAL_RCC_ClockConfig+0x260>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 030f 	and.w	r3, r3, #15
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d910      	bls.n	8001f38 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f16:	4b8e      	ldr	r3, [pc, #568]	; (8002150 <HAL_RCC_ClockConfig+0x260>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f023 020f 	bic.w	r2, r3, #15
 8001f1e:	498c      	ldr	r1, [pc, #560]	; (8002150 <HAL_RCC_ClockConfig+0x260>)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f26:	4b8a      	ldr	r3, [pc, #552]	; (8002150 <HAL_RCC_ClockConfig+0x260>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 030f 	and.w	r3, r3, #15
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d001      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e106      	b.n	8002146 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d073      	beq.n	800202c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b03      	cmp	r3, #3
 8001f4a:	d129      	bne.n	8001fa0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f4c:	4b81      	ldr	r3, [pc, #516]	; (8002154 <HAL_RCC_ClockConfig+0x264>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e0f4      	b.n	8002146 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001f5c:	f000 f966 	bl	800222c <RCC_GetSysClockFreqFromPLLSource>
 8001f60:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	4a7c      	ldr	r2, [pc, #496]	; (8002158 <HAL_RCC_ClockConfig+0x268>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d93f      	bls.n	8001fea <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001f6a:	4b7a      	ldr	r3, [pc, #488]	; (8002154 <HAL_RCC_ClockConfig+0x264>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d009      	beq.n	8001f8a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d033      	beq.n	8001fea <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d12f      	bne.n	8001fea <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f8a:	4b72      	ldr	r3, [pc, #456]	; (8002154 <HAL_RCC_ClockConfig+0x264>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f92:	4a70      	ldr	r2, [pc, #448]	; (8002154 <HAL_RCC_ClockConfig+0x264>)
 8001f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f98:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001f9a:	2380      	movs	r3, #128	; 0x80
 8001f9c:	617b      	str	r3, [r7, #20]
 8001f9e:	e024      	b.n	8001fea <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d107      	bne.n	8001fb8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fa8:	4b6a      	ldr	r3, [pc, #424]	; (8002154 <HAL_RCC_ClockConfig+0x264>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d109      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e0c6      	b.n	8002146 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fb8:	4b66      	ldr	r3, [pc, #408]	; (8002154 <HAL_RCC_ClockConfig+0x264>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e0be      	b.n	8002146 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001fc8:	f000 f8ce 	bl	8002168 <HAL_RCC_GetSysClockFreq>
 8001fcc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	4a61      	ldr	r2, [pc, #388]	; (8002158 <HAL_RCC_ClockConfig+0x268>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d909      	bls.n	8001fea <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001fd6:	4b5f      	ldr	r3, [pc, #380]	; (8002154 <HAL_RCC_ClockConfig+0x264>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fde:	4a5d      	ldr	r2, [pc, #372]	; (8002154 <HAL_RCC_ClockConfig+0x264>)
 8001fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fe4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001fe6:	2380      	movs	r3, #128	; 0x80
 8001fe8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fea:	4b5a      	ldr	r3, [pc, #360]	; (8002154 <HAL_RCC_ClockConfig+0x264>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f023 0203 	bic.w	r2, r3, #3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	4957      	ldr	r1, [pc, #348]	; (8002154 <HAL_RCC_ClockConfig+0x264>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ffc:	f7fe fccc 	bl	8000998 <HAL_GetTick>
 8002000:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002002:	e00a      	b.n	800201a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002004:	f7fe fcc8 	bl	8000998 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002012:	4293      	cmp	r3, r2
 8002014:	d901      	bls.n	800201a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e095      	b.n	8002146 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201a:	4b4e      	ldr	r3, [pc, #312]	; (8002154 <HAL_RCC_ClockConfig+0x264>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 020c 	and.w	r2, r3, #12
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	429a      	cmp	r2, r3
 800202a:	d1eb      	bne.n	8002004 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d023      	beq.n	8002080 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	2b00      	cmp	r3, #0
 8002042:	d005      	beq.n	8002050 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002044:	4b43      	ldr	r3, [pc, #268]	; (8002154 <HAL_RCC_ClockConfig+0x264>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	4a42      	ldr	r2, [pc, #264]	; (8002154 <HAL_RCC_ClockConfig+0x264>)
 800204a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800204e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0308 	and.w	r3, r3, #8
 8002058:	2b00      	cmp	r3, #0
 800205a:	d007      	beq.n	800206c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800205c:	4b3d      	ldr	r3, [pc, #244]	; (8002154 <HAL_RCC_ClockConfig+0x264>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002064:	4a3b      	ldr	r2, [pc, #236]	; (8002154 <HAL_RCC_ClockConfig+0x264>)
 8002066:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800206a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800206c:	4b39      	ldr	r3, [pc, #228]	; (8002154 <HAL_RCC_ClockConfig+0x264>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	4936      	ldr	r1, [pc, #216]	; (8002154 <HAL_RCC_ClockConfig+0x264>)
 800207a:	4313      	orrs	r3, r2
 800207c:	608b      	str	r3, [r1, #8]
 800207e:	e008      	b.n	8002092 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	2b80      	cmp	r3, #128	; 0x80
 8002084:	d105      	bne.n	8002092 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002086:	4b33      	ldr	r3, [pc, #204]	; (8002154 <HAL_RCC_ClockConfig+0x264>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	4a32      	ldr	r2, [pc, #200]	; (8002154 <HAL_RCC_ClockConfig+0x264>)
 800208c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002090:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002092:	4b2f      	ldr	r3, [pc, #188]	; (8002150 <HAL_RCC_ClockConfig+0x260>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 030f 	and.w	r3, r3, #15
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	429a      	cmp	r2, r3
 800209e:	d21d      	bcs.n	80020dc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020a0:	4b2b      	ldr	r3, [pc, #172]	; (8002150 <HAL_RCC_ClockConfig+0x260>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f023 020f 	bic.w	r2, r3, #15
 80020a8:	4929      	ldr	r1, [pc, #164]	; (8002150 <HAL_RCC_ClockConfig+0x260>)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80020b0:	f7fe fc72 	bl	8000998 <HAL_GetTick>
 80020b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b6:	e00a      	b.n	80020ce <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b8:	f7fe fc6e 	bl	8000998 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e03b      	b.n	8002146 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ce:	4b20      	ldr	r3, [pc, #128]	; (8002150 <HAL_RCC_ClockConfig+0x260>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d1ed      	bne.n	80020b8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0304 	and.w	r3, r3, #4
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d008      	beq.n	80020fa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020e8:	4b1a      	ldr	r3, [pc, #104]	; (8002154 <HAL_RCC_ClockConfig+0x264>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	4917      	ldr	r1, [pc, #92]	; (8002154 <HAL_RCC_ClockConfig+0x264>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0308 	and.w	r3, r3, #8
 8002102:	2b00      	cmp	r3, #0
 8002104:	d009      	beq.n	800211a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002106:	4b13      	ldr	r3, [pc, #76]	; (8002154 <HAL_RCC_ClockConfig+0x264>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	490f      	ldr	r1, [pc, #60]	; (8002154 <HAL_RCC_ClockConfig+0x264>)
 8002116:	4313      	orrs	r3, r2
 8002118:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800211a:	f000 f825 	bl	8002168 <HAL_RCC_GetSysClockFreq>
 800211e:	4602      	mov	r2, r0
 8002120:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <HAL_RCC_ClockConfig+0x264>)
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	091b      	lsrs	r3, r3, #4
 8002126:	f003 030f 	and.w	r3, r3, #15
 800212a:	490c      	ldr	r1, [pc, #48]	; (800215c <HAL_RCC_ClockConfig+0x26c>)
 800212c:	5ccb      	ldrb	r3, [r1, r3]
 800212e:	f003 031f 	and.w	r3, r3, #31
 8002132:	fa22 f303 	lsr.w	r3, r2, r3
 8002136:	4a0a      	ldr	r2, [pc, #40]	; (8002160 <HAL_RCC_ClockConfig+0x270>)
 8002138:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800213a:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <HAL_RCC_ClockConfig+0x274>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe fbde 	bl	8000900 <HAL_InitTick>
 8002144:	4603      	mov	r3, r0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3718      	adds	r7, #24
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40022000 	.word	0x40022000
 8002154:	40021000 	.word	0x40021000
 8002158:	04c4b400 	.word	0x04c4b400
 800215c:	08002708 	.word	0x08002708
 8002160:	20000024 	.word	0x20000024
 8002164:	20000028 	.word	0x20000028

08002168 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002168:	b480      	push	{r7}
 800216a:	b087      	sub	sp, #28
 800216c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800216e:	4b2c      	ldr	r3, [pc, #176]	; (8002220 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 030c 	and.w	r3, r3, #12
 8002176:	2b04      	cmp	r3, #4
 8002178:	d102      	bne.n	8002180 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800217a:	4b2a      	ldr	r3, [pc, #168]	; (8002224 <HAL_RCC_GetSysClockFreq+0xbc>)
 800217c:	613b      	str	r3, [r7, #16]
 800217e:	e047      	b.n	8002210 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002180:	4b27      	ldr	r3, [pc, #156]	; (8002220 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f003 030c 	and.w	r3, r3, #12
 8002188:	2b08      	cmp	r3, #8
 800218a:	d102      	bne.n	8002192 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800218c:	4b26      	ldr	r3, [pc, #152]	; (8002228 <HAL_RCC_GetSysClockFreq+0xc0>)
 800218e:	613b      	str	r3, [r7, #16]
 8002190:	e03e      	b.n	8002210 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002192:	4b23      	ldr	r3, [pc, #140]	; (8002220 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f003 030c 	and.w	r3, r3, #12
 800219a:	2b0c      	cmp	r3, #12
 800219c:	d136      	bne.n	800220c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800219e:	4b20      	ldr	r3, [pc, #128]	; (8002220 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021a8:	4b1d      	ldr	r3, [pc, #116]	; (8002220 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	091b      	lsrs	r3, r3, #4
 80021ae:	f003 030f 	and.w	r3, r3, #15
 80021b2:	3301      	adds	r3, #1
 80021b4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2b03      	cmp	r3, #3
 80021ba:	d10c      	bne.n	80021d6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021bc:	4a1a      	ldr	r2, [pc, #104]	; (8002228 <HAL_RCC_GetSysClockFreq+0xc0>)
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c4:	4a16      	ldr	r2, [pc, #88]	; (8002220 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021c6:	68d2      	ldr	r2, [r2, #12]
 80021c8:	0a12      	lsrs	r2, r2, #8
 80021ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021ce:	fb02 f303 	mul.w	r3, r2, r3
 80021d2:	617b      	str	r3, [r7, #20]
      break;
 80021d4:	e00c      	b.n	80021f0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021d6:	4a13      	ldr	r2, [pc, #76]	; (8002224 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	fbb2 f3f3 	udiv	r3, r2, r3
 80021de:	4a10      	ldr	r2, [pc, #64]	; (8002220 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021e0:	68d2      	ldr	r2, [r2, #12]
 80021e2:	0a12      	lsrs	r2, r2, #8
 80021e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021e8:	fb02 f303 	mul.w	r3, r2, r3
 80021ec:	617b      	str	r3, [r7, #20]
      break;
 80021ee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021f0:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	0e5b      	lsrs	r3, r3, #25
 80021f6:	f003 0303 	and.w	r3, r3, #3
 80021fa:	3301      	adds	r3, #1
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002200:	697a      	ldr	r2, [r7, #20]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	fbb2 f3f3 	udiv	r3, r2, r3
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	e001      	b.n	8002210 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800220c:	2300      	movs	r3, #0
 800220e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002210:	693b      	ldr	r3, [r7, #16]
}
 8002212:	4618      	mov	r0, r3
 8002214:	371c      	adds	r7, #28
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	40021000 	.word	0x40021000
 8002224:	00f42400 	.word	0x00f42400
 8002228:	007a1200 	.word	0x007a1200

0800222c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800222c:	b480      	push	{r7}
 800222e:	b087      	sub	sp, #28
 8002230:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002232:	4b1e      	ldr	r3, [pc, #120]	; (80022ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800223c:	4b1b      	ldr	r3, [pc, #108]	; (80022ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	091b      	lsrs	r3, r3, #4
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	3301      	adds	r3, #1
 8002248:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	2b03      	cmp	r3, #3
 800224e:	d10c      	bne.n	800226a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002250:	4a17      	ldr	r2, [pc, #92]	; (80022b0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	fbb2 f3f3 	udiv	r3, r2, r3
 8002258:	4a14      	ldr	r2, [pc, #80]	; (80022ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800225a:	68d2      	ldr	r2, [r2, #12]
 800225c:	0a12      	lsrs	r2, r2, #8
 800225e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002262:	fb02 f303 	mul.w	r3, r2, r3
 8002266:	617b      	str	r3, [r7, #20]
    break;
 8002268:	e00c      	b.n	8002284 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800226a:	4a12      	ldr	r2, [pc, #72]	; (80022b4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002272:	4a0e      	ldr	r2, [pc, #56]	; (80022ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002274:	68d2      	ldr	r2, [r2, #12]
 8002276:	0a12      	lsrs	r2, r2, #8
 8002278:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800227c:	fb02 f303 	mul.w	r3, r2, r3
 8002280:	617b      	str	r3, [r7, #20]
    break;
 8002282:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002284:	4b09      	ldr	r3, [pc, #36]	; (80022ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	0e5b      	lsrs	r3, r3, #25
 800228a:	f003 0303 	and.w	r3, r3, #3
 800228e:	3301      	adds	r3, #1
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	fbb2 f3f3 	udiv	r3, r2, r3
 800229c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800229e:	687b      	ldr	r3, [r7, #4]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	371c      	adds	r7, #28
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	40021000 	.word	0x40021000
 80022b0:	007a1200 	.word	0x007a1200
 80022b4:	00f42400 	.word	0x00f42400

080022b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022c0:	2300      	movs	r3, #0
 80022c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022c4:	2300      	movs	r3, #0
 80022c6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 8098 	beq.w	8002406 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022d6:	2300      	movs	r3, #0
 80022d8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022da:	4b43      	ldr	r3, [pc, #268]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10d      	bne.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022e6:	4b40      	ldr	r3, [pc, #256]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ea:	4a3f      	ldr	r2, [pc, #252]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022f0:	6593      	str	r3, [r2, #88]	; 0x58
 80022f2:	4b3d      	ldr	r3, [pc, #244]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fa:	60bb      	str	r3, [r7, #8]
 80022fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022fe:	2301      	movs	r3, #1
 8002300:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002302:	4b3a      	ldr	r3, [pc, #232]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a39      	ldr	r2, [pc, #228]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800230c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800230e:	f7fe fb43 	bl	8000998 <HAL_GetTick>
 8002312:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002314:	e009      	b.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002316:	f7fe fb3f 	bl	8000998 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d902      	bls.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	74fb      	strb	r3, [r7, #19]
        break;
 8002328:	e005      	b.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800232a:	4b30      	ldr	r3, [pc, #192]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0ef      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002336:	7cfb      	ldrb	r3, [r7, #19]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d159      	bne.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800233c:	4b2a      	ldr	r3, [pc, #168]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800233e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002346:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d01e      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	429a      	cmp	r2, r3
 8002356:	d019      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002358:	4b23      	ldr	r3, [pc, #140]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800235a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800235e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002362:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002364:	4b20      	ldr	r3, [pc, #128]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236a:	4a1f      	ldr	r2, [pc, #124]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800236c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002370:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002374:	4b1c      	ldr	r3, [pc, #112]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237a:	4a1b      	ldr	r2, [pc, #108]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800237c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002380:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002384:	4a18      	ldr	r2, [pc, #96]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b00      	cmp	r3, #0
 8002394:	d016      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002396:	f7fe faff 	bl	8000998 <HAL_GetTick>
 800239a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800239c:	e00b      	b.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800239e:	f7fe fafb 	bl	8000998 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d902      	bls.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	74fb      	strb	r3, [r7, #19]
            break;
 80023b4:	e006      	b.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023b6:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0ec      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80023c4:	7cfb      	ldrb	r3, [r7, #19]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10b      	bne.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023ca:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d8:	4903      	ldr	r1, [pc, #12]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80023e0:	e008      	b.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023e2:	7cfb      	ldrb	r3, [r7, #19]
 80023e4:	74bb      	strb	r3, [r7, #18]
 80023e6:	e005      	b.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80023e8:	40021000 	.word	0x40021000
 80023ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023f0:	7cfb      	ldrb	r3, [r7, #19]
 80023f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023f4:	7c7b      	ldrb	r3, [r7, #17]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d105      	bne.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023fa:	4ba6      	ldr	r3, [pc, #664]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fe:	4aa5      	ldr	r2, [pc, #660]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002400:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002404:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00a      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002412:	4ba0      	ldr	r3, [pc, #640]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002418:	f023 0203 	bic.w	r2, r3, #3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	499c      	ldr	r1, [pc, #624]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002422:	4313      	orrs	r3, r2
 8002424:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00a      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002434:	4b97      	ldr	r3, [pc, #604]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800243a:	f023 020c 	bic.w	r2, r3, #12
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	4994      	ldr	r1, [pc, #592]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002444:	4313      	orrs	r3, r2
 8002446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0304 	and.w	r3, r3, #4
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00a      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002456:	4b8f      	ldr	r3, [pc, #572]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800245c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	498b      	ldr	r1, [pc, #556]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002466:	4313      	orrs	r3, r2
 8002468:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0308 	and.w	r3, r3, #8
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00a      	beq.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002478:	4b86      	ldr	r3, [pc, #536]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800247a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800247e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	4983      	ldr	r1, [pc, #524]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002488:	4313      	orrs	r3, r2
 800248a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0320 	and.w	r3, r3, #32
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00a      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800249a:	4b7e      	ldr	r3, [pc, #504]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800249c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	695b      	ldr	r3, [r3, #20]
 80024a8:	497a      	ldr	r1, [pc, #488]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00a      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024bc:	4b75      	ldr	r3, [pc, #468]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	4972      	ldr	r1, [pc, #456]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00a      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024de:	4b6d      	ldr	r3, [pc, #436]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	69db      	ldr	r3, [r3, #28]
 80024ec:	4969      	ldr	r1, [pc, #420]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00a      	beq.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002500:	4b64      	ldr	r3, [pc, #400]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002506:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a1b      	ldr	r3, [r3, #32]
 800250e:	4961      	ldr	r1, [pc, #388]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002510:	4313      	orrs	r3, r2
 8002512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00a      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002522:	4b5c      	ldr	r3, [pc, #368]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002528:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002530:	4958      	ldr	r1, [pc, #352]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002532:	4313      	orrs	r3, r2
 8002534:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002540:	2b00      	cmp	r3, #0
 8002542:	d015      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002544:	4b53      	ldr	r3, [pc, #332]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002552:	4950      	ldr	r1, [pc, #320]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002554:	4313      	orrs	r3, r2
 8002556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002562:	d105      	bne.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002564:	4b4b      	ldr	r3, [pc, #300]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	4a4a      	ldr	r2, [pc, #296]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800256a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800256e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002578:	2b00      	cmp	r3, #0
 800257a:	d015      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800257c:	4b45      	ldr	r3, [pc, #276]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800257e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002582:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258a:	4942      	ldr	r1, [pc, #264]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800258c:	4313      	orrs	r3, r2
 800258e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002596:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800259a:	d105      	bne.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800259c:	4b3d      	ldr	r3, [pc, #244]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	4a3c      	ldr	r2, [pc, #240]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025a6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d015      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80025b4:	4b37      	ldr	r3, [pc, #220]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	4934      	ldr	r1, [pc, #208]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025d2:	d105      	bne.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025d4:	4b2f      	ldr	r3, [pc, #188]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	4a2e      	ldr	r2, [pc, #184]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025de:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d015      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025ec:	4b29      	ldr	r3, [pc, #164]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025fa:	4926      	ldr	r1, [pc, #152]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002606:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800260a:	d105      	bne.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800260c:	4b21      	ldr	r3, [pc, #132]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	4a20      	ldr	r2, [pc, #128]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002612:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002616:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d015      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002624:	4b1b      	ldr	r3, [pc, #108]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800262a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002632:	4918      	ldr	r1, [pc, #96]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002634:	4313      	orrs	r3, r2
 8002636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002642:	d105      	bne.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002644:	4b13      	ldr	r3, [pc, #76]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	4a12      	ldr	r2, [pc, #72]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800264a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800264e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d015      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800265c:	4b0d      	ldr	r3, [pc, #52]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800265e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002662:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800266a:	490a      	ldr	r1, [pc, #40]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800266c:	4313      	orrs	r3, r2
 800266e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002676:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800267a:	d105      	bne.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800267c:	4b05      	ldr	r3, [pc, #20]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	4a04      	ldr	r2, [pc, #16]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002682:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002686:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002688:	7cbb      	ldrb	r3, [r7, #18]
}
 800268a:	4618      	mov	r0, r3
 800268c:	3718      	adds	r7, #24
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40021000 	.word	0x40021000

08002698 <memset>:
 8002698:	4402      	add	r2, r0
 800269a:	4603      	mov	r3, r0
 800269c:	4293      	cmp	r3, r2
 800269e:	d100      	bne.n	80026a2 <memset+0xa>
 80026a0:	4770      	bx	lr
 80026a2:	f803 1b01 	strb.w	r1, [r3], #1
 80026a6:	e7f9      	b.n	800269c <memset+0x4>

080026a8 <__libc_init_array>:
 80026a8:	b570      	push	{r4, r5, r6, lr}
 80026aa:	4d0d      	ldr	r5, [pc, #52]	; (80026e0 <__libc_init_array+0x38>)
 80026ac:	4c0d      	ldr	r4, [pc, #52]	; (80026e4 <__libc_init_array+0x3c>)
 80026ae:	1b64      	subs	r4, r4, r5
 80026b0:	10a4      	asrs	r4, r4, #2
 80026b2:	2600      	movs	r6, #0
 80026b4:	42a6      	cmp	r6, r4
 80026b6:	d109      	bne.n	80026cc <__libc_init_array+0x24>
 80026b8:	4d0b      	ldr	r5, [pc, #44]	; (80026e8 <__libc_init_array+0x40>)
 80026ba:	4c0c      	ldr	r4, [pc, #48]	; (80026ec <__libc_init_array+0x44>)
 80026bc:	f000 f818 	bl	80026f0 <_init>
 80026c0:	1b64      	subs	r4, r4, r5
 80026c2:	10a4      	asrs	r4, r4, #2
 80026c4:	2600      	movs	r6, #0
 80026c6:	42a6      	cmp	r6, r4
 80026c8:	d105      	bne.n	80026d6 <__libc_init_array+0x2e>
 80026ca:	bd70      	pop	{r4, r5, r6, pc}
 80026cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80026d0:	4798      	blx	r3
 80026d2:	3601      	adds	r6, #1
 80026d4:	e7ee      	b.n	80026b4 <__libc_init_array+0xc>
 80026d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80026da:	4798      	blx	r3
 80026dc:	3601      	adds	r6, #1
 80026de:	e7f2      	b.n	80026c6 <__libc_init_array+0x1e>
 80026e0:	08002728 	.word	0x08002728
 80026e4:	08002728 	.word	0x08002728
 80026e8:	08002728 	.word	0x08002728
 80026ec:	0800272c 	.word	0x0800272c

080026f0 <_init>:
 80026f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026f2:	bf00      	nop
 80026f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026f6:	bc08      	pop	{r3}
 80026f8:	469e      	mov	lr, r3
 80026fa:	4770      	bx	lr

080026fc <_fini>:
 80026fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026fe:	bf00      	nop
 8002700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002702:	bc08      	pop	{r3}
 8002704:	469e      	mov	lr, r3
 8002706:	4770      	bx	lr
